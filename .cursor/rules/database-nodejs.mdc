---
description: 
globs: 
alwaysApply: true
---
# 数据库和Node.js开发部署规范
# 数据库管理、Node.js应用开发、部署、监控等综合规范

## 数据库表结构和索引管理规范

### 数据库表结构变更规范
- 禁止在生产环境频繁使用sequelize.sync({ alter: true })或force: true，表结构变更必须通过手动SQL脚本或迁移工具完成
- 每张表的索引总数不得超过MySQL的64个限制，如需新增索引，必须先评估和清理无用索引
- 初始化脚本必须加超时和详细日志，如遇长时间无响应，需立即排查数据库连接和表结构问题
- 大批量数据插入必须分批处理，每批不超过100条，避免单次SQL阻塞
- 所有表结构和索引变更需在代码评审时重点检查，防止上线后阻塞数据库

### 数据库长时间初始化处理
- 当数据库初始化脚本运行超过2分钟时，应该先检查数据库状态和表结构
- 验证数据是否已成功初始化，使用timeout命令限制脚本运行时间
- 避免在生产环境使用force模式重建数据库
- 优先使用ALTER TABLE而不是DROP TABLE处理表结构变更

### 数据库初始化和迁移规范
- 保持初始化脚本的幂等性，可重复执行不产生副作用
- 初始化脚本必须包含完整的错误处理和日志记录
- 使用事务确保数据的一致性，失败时自动回滚
- 初始化脚本运行时间监控，超过预期时间自动报警

### 数据库迁移规范
- 所有表结构变更必须通过迁移脚本完成，禁止直接修改数据库
- 迁移脚本必须包含up和down操作，支持回滚
- 重要迁移操作前必须备份数据库
- 迁移脚本执行前必须在测试环境验证
- 迁移操作必须在维护窗口期间执行，避免影响正常业务

### 数据库性能优化规范
- 定期分析查询性能，识别和优化慢查询
- 合理设计索引策略，避免过度索引和索引冗余
- 监控数据库连接池状态，避免连接泄漏
- 实施数据库连接超时和重试机制
- 定期清理无用数据和日志，控制数据库大小

## 测试数据一致性规范

### 统一测试数据管理
- 所有测试用户数据必须定义在统一的配置文件中（如 config/test-data.js）
- 禁止在多个文件中硬编码相同的测试数据
- 初始化脚本和测试脚本必须引用同一个数据源
- 只保留一个主要的初始化脚本，其他过时脚本必须删除或明确标记

### 强制数据存在性检查
- 测试脚本必须包含数据存在性检查，避免空指针异常
- 所有数据库操作前必须验证依赖数据是否存在
- 所有数据库查询必须检查返回结果是否为null/undefined
- 使用 try-catch 包装可能失败的操作
- 提供有意义的错误消息，便于快速定位问题

### 模型导入一致性
- 所有测试文件的模型导入路径必须一致
- 使用相对路径时必须确保从当前文件位置正确导入
- 添加模型导入失败的错误处理

### 测试数据同步机制
- 每次修改初始化脚本时，必须同步更新相关的测试脚本
- 在CI/CD中添加测试数据一致性检查
- 测试失败时输出明确的错误信息，包含期望数据和实际数据

### 增强错误处理示例代码
```javascript
// ✅ 正确模式 - 统一配置 + 错误检查  
const TEST_CONFIG = require('./config/test-data.js');
const testUser = await User.findOne({ where: { mobile: TEST_CONFIG.TEST_USER_MOBILE } });
if (!testUser) {
  console.error(`测试用户不存在: ${TEST_CONFIG.TEST_USER_MOBILE}`);
  console.log('请运行: node scripts/init-database.js');
  process.exit(1);
}
const { accessToken } = generateTokens(testUser);
```

## Node.js应用开发规范

### 内存管理规范
- 开发环境必须设置合理的内存限制，避免内存使用率超过80%
- 使用 NODE_OPTIONS="--max-old-space-size=512" 控制堆内存大小
- PM2配置中设置 max_memory_restart 低于实际内存限制
- 实施内存监控告警，超过75%时自动重启进程
- 避免在开发环境使用集群模式，优先使用fork模式

### API路径规范
- 健康检查端点必须同时提供 /health 和 /api/health 两个路径
- 所有API端点必须有对应的错误处理机制
- API路径变更时必须同步更新文档和测试用例
- 实施API版本控制和向后兼容策略

### 服务监控规范
- 所有服务组件必须实现 isHealthy() 方法
- WebSocket等实时服务需要实现连接计数和状态检查
- 健康检查端点必须返回详细的服务状态信息
- 实施服务依赖检查和故障隔离机制

### 进程管理规范
- 开发环境使用单进程模式，生产环境可使用集群模式
- 配置合理的进程重启策略和超时时间
- 实施优雅关闭机制，确保数据一致性
- 配置日志轮转和存储策略

### 资源优化规范
- Node.js启动参数必须根据环境进行优化
- 避免使用不支持的启动参数组合
- 实施资源使用监控和告警机制
- 定期进行性能分析和优化

### 错误处理规范
- 所有异步操作必须有错误处理
- 实施全局错误捕获和处理机制
- 错误信息必须包含上下文和解决建议
- 建立错误分类和优先级体系

## 命令执行和环境检查规范

### 环境依赖完整性检查
- 在开始任何开发任务前必须执行环境检查
- 检查Node.js版本和PM2安装状态
- 验证package.json中的依赖是否已安装
- 确认数据库连接配置的正确性
- 验证环境变量文件的完整性

### 应用启动状态验证
- 应用启动后必须进行完整的健康检查
- 检查端口监听状态：netstat -tlnp | grep :PORT
- 验证健康检查端点：curl -f http://localhost:PORT/api/health
- 确认PM2进程状态：pm2 status
- 检查应用日志：pm2 logs --lines 20

### 命令执行标准化
- 所有长时间运行的命令必须设置超时和限制参数
- 使用timeout命令限制执行时间：timeout 120s command
- 日志查看命令必须限制行数：--lines N
- 网络请求必须设置超时：curl -m 30
- 大文件操作需要进度显示和分段处理

### 错误处理和恢复
- 每个关键操作必须有错误处理和恢复机制
- 命令失败时提供具体的错误信息和解决方案
- 超时命令必须有重试机制（最多3次）
- 关键服务异常时提供替代方案
- 错误信息必须包含上下文和调试信息

## 端口占用和进程管理规范

### 端口占用检查和处理
- 启动Node.js应用前必须检查端口占用状态：netstat -tlnp | grep :PORT
- 发现端口被占用时必须先终止占用进程：pkill -f "node.*app.js"
- 应用重启必须等待前一进程完全终止（至少2秒间隔）
- 使用PM2等进程管理工具时要检查进程状态：pm2 status
- 开发环境建议使用nodemon等热重载工具减少重启频率

### 应用开发和调试规范
- 代码修改后重启应用前必须检查当前运行状态
- 使用curl -f http://localhost:PORT/health验证应用健康状态
- 重启失败时立即分析错误原因，不要盲目重试
- 开发环境配置文件监听和自动重启机制
- 关键修改后必须验证核心功能正常运行

### 错误处理和恢复机制规范
- 每个关键操作必须有自动化的错误恢复流程
- 端口占用错误：自动终止占用进程 → 等待2秒 → 重新启动
- 应用启动失败：检查配置文件 → 检查依赖 → 检查端口 → 重试
- 数据库连接失败：检查服务状态 → 检查配置 → 重试连接
- 错误恢复失败时提供详细的诊断信息和手动解决方案

### 开发环境优化规范
- 使用nodemon或类似工具实现代码热重载
- 配置合理的文件监听规则，避免不必要的重启
- 设置环境变量区分开发和生产环境
- 开发环境使用更宽松的超时和重试策略
- 配置详细的日志输出便于问题诊断

## 资源使用监控规范

### 系统资源监控
- 定期检查系统资源使用情况（内存、CPU、磁盘）
- 监控Node.js进程的内存使用，避免内存泄漏
- 检查数据库连接池状态，避免连接泄漏
- 监控端口使用情况，及时清理僵尸进程
- 设置资源使用告警阈值

### WebSocket服务监控
- WebSocket服务必须实现完整的健康检查
- 实现isHealthy()方法检查连接状态
- 监控活跃连接数和连接质量
- 提供连接重连机制和故障转移
- 记录详细的连接和断开日志

### 开发环境一致性
- 开发环境配置必须标准化
- 所有开发者使用相同的Node.js版本
- 统一的依赖管理和版本锁定
- 标准化的启动和停止脚本
- 一致的环境变量配置模板

## 部署配置规范

### 环境配置管理
- 环境配置必须区分开发、测试、生产环境
- 敏感信息必须通过环境变量管理
- 实施配置验证和兼容性检查
- 建立配置变更追踪机制

### 部署流程标准化
- 建立自动化的持续集成/持续部署流程
- 部署前进行完整的回归测试
- 配置蓝绿部署或滚动发布策略
- 建立快速回滚机制

### 监控和告警体系
- 实施全方位的应用性能监控
- 配置关键指标的告警机制
- 建立日志聚合和分析系统
- 实施健康检查和故障自愈机制

**核心原则**：数据安全优先、性能兼顾、可维护性保证、测试覆盖完整、稳定性优先、监控全面

## WebSocket服务配置和管理规范

### WebSocket服务初始化配置规范
- WebSocket服务必须配置明确的路径：path: '/ws'
- 初始化时必须输出连接地址信息，便于前端配置
- 支持wss://协议用于生产环境的安全连接
- 实现Token验证机制确保连接安全性
- 配置心跳机制维持连接稳定性

### WebSocket路径和域名配置
- 标准WebSocket路径：/ws（避免与HTTP路由冲突）
- 微信小程序socket合法域名必须配置为：wss://domain.com
- 开发环境支持ws://localhost:port/ws本地测试
- 生产环境强制使用wss://加密连接
- 路径变更时同步更新前端配置和文档

### WebSocket服务重启和恢复
- 服务重启前必须先关闭现有WebSocket连接
- 配置更改后必须重启Node.js服务才能生效
- 重启后验证WebSocket服务是否正确加载新配置
- 提供WebSocket连接测试机制验证服务可用性
- 建立WebSocket服务故障自动恢复机制

### WebSocket健康检查规范
- 健康检查接口必须包含WebSocket服务状态
- 监控活跃连接数和连接质量
- 实现连接数限制和资源保护
- 记录连接建立和断开的详细日志
- 定期清理异常断开的连接资源

## 进程管理和端口占用处理规范

### EADDRINUSE错误标准处理流程
- 启动服务前必须检查端口占用：netstat -tlnp | grep :PORT
- 发现端口占用时执行：pkill -f "node.*app.js"
- 等待进程完全终止：sleep 3（至少2-3秒）
- 验证端口释放：再次检查netstat输出
- 重新启动服务并验证成功

### 进程清理和服务重启规范
- 使用具体的进程匹配模式：pkill -f "node.*app.js"
- 避免使用模糊匹配杀死无关进程
- 清理进程后必须等待足够时间确保端口释放
- 使用nohup启动后台服务：nohup node app.js > server.log 2>&1 &
- 服务启动后立即验证健康状态

### 服务状态验证和监控
- 进程状态检查：ps aux | grep "node.*app.js"
- 端口监听检查：netstat -tlnp | grep :PORT
- 健康检查验证：curl -s http://localhost:PORT/health
- 日志文件监控：tail -f server.log
- 建立服务状态检查清单

### 开发环境服务管理最佳实践
- 使用nodemon等工具实现热重载开发
- 配置文件变更监听和自动重启
- 建立统一的启动和停止脚本
- 实现开发环境和生产环境的差异化配置
- 提供服务管理的快捷命令和脚本

### 错误恢复和故障排除
- 端口占用：清理进程 → 等待 → 重启 → 验证
- 配置错误：检查配置文件 → 修复 → 重启 → 测试
- 依赖问题：检查package.json → 重新安装 → 重启
- 数据库连接：检查数据库状态 → 重试连接
- 建立常见问题的快速诊断和修复流程

## 命令执行格式化和输出优化规范

### curl命令标准化格式
- 使用超时参数：curl -m 30 避免无限等待
- 静默模式：curl -s 减少冗余输出
- JSON格式化：配合 | python -m json.tool 或 | jq
- 限制输出长度：使用 | head -10 避免过长显示
- 错误处理：使用 || echo "请求失败" 提供友好提示

### 系统状态检查命令优化
- 进程检查：ps aux | grep pattern | grep -v grep
- 端口检查：netstat -tlnp | grep :PORT
- 日志检查：tail -n 20 logfile 限制行数
- 磁盘使用：df -h 人性化显示
- 内存使用：free -h 格式化显示

### 工具调用输出处理
- 长输出使用分页：head/tail限制显示
- JSON数据解析：提取关键字段而非完整输出
- 错误信息过滤：grep重点信息避免信息过载
- 并行调用结果整合：统一格式输出
- 建立输出模板确保一致性

**WebSocket和进程管理核心原则**：配置明确、重启标准、监控完整、恢复自动

## WebSocket路径配置缺失问题专项规范

### WebSocket路径配置检查清单
- WebSocket服务初始化时必须明确指定path参数：path: '/ws'
- 服务启动日志必须输出WebSocket路径信息：console.log('WebSocket路径: /ws')
- 微信小程序连接地址格式验证：wss://domain.com/ws
- 开发环境ws://localhost:3000/ws本地测试验证
- WebSocket路径变更后必须重启Node.js服务才能生效

### WebSocket服务配置验证流程
- 步骤1：检查services/websocket.js中的路径配置
- 步骤2：验证WebSocket服务初始化代码正确性
- 步骤3：重启服务后检查启动日志中的路径信息
- 步骤4：使用健康检查端点验证WebSocket服务状态
- 步骤5：前端连接测试验证WebSocket可用性

### WebSocket连接失败快速诊断
- 检查1：服务端路径配置 - path: '/ws' 是否存在
- 检查2：服务重启状态 - 配置修改后是否重启服务
- 检查3：域名白名单配置 - 微信小程序后台配置是否正确
- 检查4：SSL证书状态 - wss://连接的证书是否有效
- 检查5：防火墙端口 - WebSocket端口是否被阻止

## API测试和调试效率优化规范

### curl命令标准模板
- 基础GET请求：curl -s -m 30 "http://localhost:3000/api/endpoint"
- POST请求JSON：curl -s -m 30 -X POST -H "Content-Type: application/json" -d '{"key":"value"}' "http://localhost:3000/api/endpoint"
- 带认证请求：curl -s -m 30 -H "Authorization: Bearer token" "http://localhost:3000/api/endpoint"
- 格式化输出：curl -s -m 30 "http://localhost:3000/api/endpoint" | python -m json.tool | head -20
- 错误处理：curl -s -m 30 "http://localhost:3000/api/endpoint" || echo "API请求失败，请检查服务状态"

### API状态批量检查规范
- 健康检查：curl -s -m 10 "http://localhost:3000/health"
- 认证端点：curl -s -m 10 -X POST "http://localhost:3000/api/auth/login" -H "Content-Type: application/json" -d '{}'
- 用户信息：curl -s -m 10 "http://localhost:3000/api/user/info" -H "Authorization: Bearer test-token"
- 抽奖配置：curl -s -m 10 "http://localhost:3000/api/lottery/config"
- 批量检查失败时立即检查路由定义和服务状态

### JSON响应处理优化
- 大JSON响应限制显示：| head -20 或 | tail -20
- 关键字段提取：| grep -E '"(code|msg|status|error)"'
- 格式化显示：| python -m json.tool（如果可用）
- 错误信息过滤：| grep -v "deprecation\|warning"
- 响应时间测试：curl -w "@curl-format.txt" -s -o /dev/null "url"

## 服务重启和验证标准化流程

### Node.js服务重启标准流程
- 步骤1：检查当前进程状态 - ps aux | grep "node.*app.js"
- 步骤2：终止现有进程 - pkill -f "node.*app.js"
- 步骤3：等待端口释放 - sleep 3 && netstat -tlnp | grep :3000
- 步骤4：启动后台服务 - nohup node app.js > server.log 2>&1 &
- 步骤5：验证服务健康 - sleep 5 && curl -s "http://localhost:3000/health"

### 服务状态验证检查点
- 检查点1：进程运行状态 - ps aux | grep node
- 检查点2：端口监听状态 - netstat -tlnp | grep :3000
- 检查点3：健康检查响应 - curl -s "http://localhost:3000/health"
- 检查点4：日志错误检查 - tail -10 server.log | grep -i error
- 检查点5：WebSocket服务状态 - 健康检查中websocket字段验证

### 常见服务启动问题快速修复
- EADDRINUSE错误：pkill -f "node.*app.js" && sleep 3 && 重启
- 端口占用问题：netstat -tlnp | grep :3000 && kill -9 PID
- 配置文件错误：检查.env文件和config目录完整性
- 依赖模块缺失：npm install 或 yarn install 重新安装
- 数据库连接失败：检查数据库服务状态和连接字符串

## 微信小程序后端适配规范

### 域名白名单配置验证
- request合法域名：https://domain.com
- socket合法域名：wss://domain.com  
- downloadFile合法域名：https://domain.com
- uploadFile合法域名：https://domain.com
- 配置完成后需要重新发布小程序才生效

### 小程序网络请求特殊处理
- 所有API必须支持HTTPS访问
- WebSocket必须使用wss://加密连接
- 响应头必须包含正确的CORS配置
- 错误状态码必须符合小程序规范
- 接口响应时间优化，避免小程序超时

### 小程序调试和测试规范
- 开发者工具网络面板监控请求状态
- 真机调试验证域名白名单配置
- 线上版本发布前完整接口测试
- 网络异常情况下的降级处理
- 小程序审核要求的接口安全性检查

**专项核心原则**：配置明确、验证完整、问题快修、小程序适配、用户体验优先
