---
description: 
globs: 
alwaysApply: true
---
# 数据库和Node.js开发部署规范
# 数据库管理、Node.js应用开发、部署、监控等综合规范

## 数据库表结构和索引管理规范

### 数据库表结构变更规范
- 禁止在生产环境频繁使用sequelize.sync({ alter: true })或force: true，表结构变更必须通过手动SQL脚本或迁移工具完成
- 每张表的索引总数不得超过MySQL的64个限制，如需新增索引，必须先评估和清理无用索引
- 初始化脚本必须加超时和详细日志，如遇长时间无响应，需立即排查数据库连接和表结构问题
- 大批量数据插入必须分批处理，每批不超过100条，避免单次SQL阻塞
- 所有表结构和索引变更需在代码评审时重点检查，防止上线后阻塞数据库

### 数据库长时间初始化处理
- 当数据库初始化脚本运行超过2分钟时，应该先检查数据库状态和表结构
- 验证数据是否已成功初始化，使用timeout命令限制脚本运行时间
- 避免在生产环境使用force模式重建数据库
- 优先使用ALTER TABLE而不是DROP TABLE处理表结构变更

### 数据库初始化和迁移规范
- 保持初始化脚本的幂等性，可重复执行不产生副作用
- 初始化脚本必须包含完整的错误处理和日志记录
- 使用事务确保数据的一致性，失败时自动回滚
- 初始化脚本运行时间监控，超过预期时间自动报警

### 数据库迁移规范
- 所有表结构变更必须通过迁移脚本完成，禁止直接修改数据库
- 迁移脚本必须包含up和down操作，支持回滚
- 重要迁移操作前必须备份数据库
- 迁移脚本执行前必须在测试环境验证
- 迁移操作必须在维护窗口期间执行，避免影响正常业务

### 数据库性能优化规范
- 定期分析查询性能，识别和优化慢查询
- 合理设计索引策略，避免过度索引和索引冗余
- 监控数据库连接池状态，避免连接泄漏
- 实施数据库连接超时和重试机制
- 定期清理无用数据和日志，控制数据库大小

## 测试数据一致性规范

### 统一测试数据管理
- 所有测试用户数据必须定义在统一的配置文件中（如 config/test-data.js）
- 禁止在多个文件中硬编码相同的测试数据
- 初始化脚本和测试脚本必须引用同一个数据源
- 只保留一个主要的初始化脚本，其他过时脚本必须删除或明确标记

### 强制数据存在性检查
- 测试脚本必须包含数据存在性检查，避免空指针异常
- 所有数据库操作前必须验证依赖数据是否存在
- 所有数据库查询必须检查返回结果是否为null/undefined
- 使用 try-catch 包装可能失败的操作
- 提供有意义的错误消息，便于快速定位问题

### 模型导入一致性
- 所有测试文件的模型导入路径必须一致
- 使用相对路径时必须确保从当前文件位置正确导入
- 添加模型导入失败的错误处理

### 测试数据同步机制
- 每次修改初始化脚本时，必须同步更新相关的测试脚本
- 在CI/CD中添加测试数据一致性检查
- 测试失败时输出明确的错误信息，包含期望数据和实际数据

### 增强错误处理示例代码
```javascript
// ✅ 正确模式 - 统一配置 + 错误检查  
const TEST_CONFIG = require('./config/test-data.js');
const testUser = await User.findOne({ where: { mobile: TEST_CONFIG.TEST_USER_MOBILE } });
if (!testUser) {
  console.error(`测试用户不存在: ${TEST_CONFIG.TEST_USER_MOBILE}`);
  console.log('请运行: node scripts/init-database.js');
  process.exit(1);
}
const { accessToken } = generateTokens(testUser);
```

## Node.js应用开发规范

### 内存管理规范
- 开发环境必须设置合理的内存限制，避免内存使用率超过80%
- 使用 NODE_OPTIONS="--max-old-space-size=512" 控制堆内存大小
- PM2配置中设置 max_memory_restart 低于实际内存限制
- 实施内存监控告警，超过75%时自动重启进程
- 避免在开发环境使用集群模式，优先使用fork模式

### API路径规范
- 健康检查端点必须同时提供 /health 和 /api/health 两个路径
- 所有API端点必须有对应的错误处理机制
- API路径变更时必须同步更新文档和测试用例
- 实施API版本控制和向后兼容策略

### 服务监控规范
- 所有服务组件必须实现 isHealthy() 方法
- WebSocket等实时服务需要实现连接计数和状态检查
- 健康检查端点必须返回详细的服务状态信息
- 实施服务依赖检查和故障隔离机制

### 进程管理规范
- 开发环境使用单进程模式，生产环境可使用集群模式
- 配置合理的进程重启策略和超时时间
- 实施优雅关闭机制，确保数据一致性
- 配置日志轮转和存储策略

### 资源优化规范
- Node.js启动参数必须根据环境进行优化
- 避免使用不支持的启动参数组合
- 实施资源使用监控和告警机制
- 定期进行性能分析和优化

### 错误处理规范
- 所有异步操作必须有错误处理
- 实施全局错误捕获和处理机制
- 错误信息必须包含上下文和解决建议
- 建立错误分类和优先级体系

## 命令执行和环境检查规范

### 环境依赖完整性检查
- 在开始任何开发任务前必须执行环境检查
- 检查Node.js版本和PM2安装状态
- 验证package.json中的依赖是否已安装
- 确认数据库连接配置的正确性
- 验证环境变量文件的完整性

### 应用启动状态验证
- 应用启动后必须进行完整的健康检查
- 检查端口监听状态：netstat -tlnp | grep :PORT
- 验证健康检查端点：curl -f http://localhost:PORT/api/health
- 确认PM2进程状态：pm2 status
- 检查应用日志：pm2 logs --lines 20

### 命令执行标准化
- 所有长时间运行的命令必须设置超时和限制参数
- 使用timeout命令限制执行时间：timeout 120s command
- 日志查看命令必须限制行数：--lines N
- 网络请求必须设置超时：curl -m 30
- 大文件操作需要进度显示和分段处理

### 错误处理和恢复
- 每个关键操作必须有错误处理和恢复机制
- 命令失败时提供具体的错误信息和解决方案
- 超时命令必须有重试机制（最多3次）
- 关键服务异常时提供替代方案
- 错误信息必须包含上下文和调试信息

## 端口占用和进程管理规范

### 端口占用检查和处理
- 启动Node.js应用前必须检查端口占用状态：netstat -tlnp | grep :PORT
- 发现端口被占用时必须先终止占用进程：pkill -f "node.*app.js"
- 应用重启必须等待前一进程完全终止（至少2秒间隔）
- 使用PM2等进程管理工具时要检查进程状态：pm2 status
- 开发环境建议使用nodemon等热重载工具减少重启频率

### 应用开发和调试规范
- 代码修改后重启应用前必须检查当前运行状态
- 使用curl -f http://localhost:PORT/health验证应用健康状态
- 重启失败时立即分析错误原因，不要盲目重试
- 开发环境配置文件监听和自动重启机制
- 关键修改后必须验证核心功能正常运行

### 错误处理和恢复机制规范
- 每个关键操作必须有自动化的错误恢复流程
- 端口占用错误：自动终止占用进程 → 等待2秒 → 重新启动
- 应用启动失败：检查配置文件 → 检查依赖 → 检查端口 → 重试
- 数据库连接失败：检查服务状态 → 检查配置 → 重试连接
- 错误恢复失败时提供详细的诊断信息和手动解决方案

### 开发环境优化规范
- 使用nodemon或类似工具实现代码热重载
- 配置合理的文件监听规则，避免不必要的重启
- 设置环境变量区分开发和生产环境
- 开发环境使用更宽松的超时和重试策略
- 配置详细的日志输出便于问题诊断

## 资源使用监控规范

### 系统资源监控
- 定期检查系统资源使用情况（内存、CPU、磁盘）
- 监控Node.js进程的内存使用，避免内存泄漏
- 检查数据库连接池状态，避免连接泄漏
- 监控端口使用情况，及时清理僵尸进程
- 设置资源使用告警阈值

### WebSocket服务监控
- WebSocket服务必须实现完整的健康检查
- 实现isHealthy()方法检查连接状态
- 监控活跃连接数和连接质量
- 提供连接重连机制和故障转移
- 记录详细的连接和断开日志

### 开发环境一致性
- 开发环境配置必须标准化
- 所有开发者使用相同的Node.js版本
- 统一的依赖管理和版本锁定
- 标准化的启动和停止脚本
- 一致的环境变量配置模板

## 部署配置规范

### 环境配置管理
- 环境配置必须区分开发、测试、生产环境
- 敏感信息必须通过环境变量管理
- 实施配置验证和兼容性检查
- 建立配置变更追踪机制

### 部署流程标准化
- 建立自动化的持续集成/持续部署流程
- 部署前进行完整的回归测试
- 配置蓝绿部署或滚动发布策略
- 建立快速回滚机制

### 监控和告警体系
- 实施全方位的应用性能监控
- 配置关键指标的告警机制
- 建立日志聚合和分析系统
- 实施健康检查和故障自愈机制

**核心原则**：数据安全优先、性能兼顾、可维护性保证、测试覆盖完整、稳定性优先、监控全面

## 抽奖业务逻辑规范

### 批量抽奖积分扣除规范
- **统一扣费时机**：批量抽奖（如5连抽、10连抽）必须在开始前一次性扣除所有积分，禁止循环中重复扣除
- **事务完整性**：整个批量抽奖过程必须在单个数据库事务中完成，确保数据一致性
- **积分计算公式**：totalCost = actualCount * costPoints，必须正确计算总消费
- **积分不足检查**：扣除积分前必须检查用户积分是否足够，不足时立即返回错误
- **扣费记录完整**：每次积分扣除都必须记录到PointsRecord表，包含描述、来源、余额等信息

### 抽奖类型参数映射规范
- **参数兼容性**：后端必须支持前端常用的抽奖类型参数映射：
  * 'single': 1次
  * 'triple': 3次
  * 'quintuple': 5次, 'five': 5次
  * 'decade': 10次, 'ten': 10次
- **参数验证**：对不支持的抽奖类型返回明确错误信息
- **默认值处理**：未指定抽奖类型时默认为'single'单次抽奖
- **向后兼容**：新增抽奖类型时必须保持对现有类型的支持

### 抽奖结果数据规范
- **序号字段完整性**：每个抽奖结果必须包含draw_sequence字段，从1开始递增
- **用户信息路径**：确保user_info.remaining_points等字段路径正确，避免undefined
- **响应格式一致性**：保持与前端约定的响应格式，包含所有必要字段
- **保底机制准确性**：正确实现和返回保底触发状态和剩余次数

### 每日限制配置规范
- **默认值一致性**：确保代码中所有地方的每日限制默认值保持一致
- **环境变量优先级**：明确DAILY_LOTTERY_LIMIT环境变量优先于代码默认值
- **配置验证**：启动时验证限制配置的合理性（通常50次/天）
- **限制范围检查**：基于用户ID进行每日限制，不是全局限制
- **时区处理**：正确处理每日重置的时间边界，考虑服务器时区设置

## 批量操作性能优化规范

### 数据库批量操作规范
- **分批处理策略**：大批量数据操作必须分批处理，每批不超过100条记录
- **事务边界控制**：合理控制事务范围，避免长时间锁定数据库
- **并发控制**：批量操作时考虑并发访问，使用适当的锁机制
- **内存使用优化**：避免将大量数据同时加载到内存中
- **进度监控**：长时间批量操作提供进度反馈机制

### 抽奖算法优化规范
- **概率计算缓存**：抽奖概率计算结果应缓存，避免重复计算
- **保底机制优化**：保底计数更新使用原子操作，避免并发问题
- **奖品库存检查**：实物奖品需要检查库存，避免超发
- **随机数生成**：使用加密安全的随机数生成器确保公平性
- **算法透明度**：抽奖算法应可审计，保证公平性和合规性

### API响应优化规范
- **响应时间控制**：单次抽奖响应时间不超过2秒，批量抽奖不超过5秒
- **数据传输优化**：只返回必要的数据字段，减少网络传输量
- **错误处理优化**：错误响应包含错误码、描述和建议解决方案
- **并发处理**：支持合理的并发抽奖请求，避免系统过载
- **缓存策略**：对配置数据、奖品信息等使用适当的缓存策略

## 配置管理和一致性规范

### 关键配置项检查机制
- **启动时配置验证**：应用启动时检查所有关键配置项的有效性
- **配置冲突检测**：自动检测不同配置源（环境变量、配置文件、代码默认值）的冲突
- **配置热更新支持**：支持运行时更新非关键配置，避免频繁重启
- **配置审计日志**：记录配置变更历史，便于问题追踪
- **默认值文档化**：所有配置项的默认值和含义必须有完整文档

### 业务规则配置规范
- **抽奖成本配置**：LOTTERY_COST_POINTS等业务参数通过环境变量配置
- **限制值配置**：每日抽奖次数、保底次数等限制通过配置管理
- **奖品概率配置**：奖品概率支持动态配置，方便运营调整
- **保底机制配置**：保底触发条件和奖品可配置化
- **业务开关配置**：关键业务功能支持开关控制，便于紧急处理

### 环境差异化配置
- **开发环境配置**：较宽松的限制和详细的调试信息
- **测试环境配置**：接近生产的配置，支持自动化测试
- **生产环境配置**：严格的限制和安全配置
- **配置模板化**：为不同环境提供配置模板
- **敏感信息保护**：生产环境敏感配置通过安全方式管理

## 错误处理和异常恢复规范

### 抽奖业务异常处理
- **积分不足处理**：明确返回剩余积分和所需积分信息
- **限制触发处理**：返回今日已抽次数和剩余次数信息
- **数据库异常处理**：事务失败时正确回滚，返回友好错误信息
- **网络超时处理**：设置合理的数据库连接和查询超时
- **并发冲突处理**：处理多用户同时抽奖的并发冲突

### 业务数据一致性保证
- **事务完整性**：关键业务操作使用数据库事务保证一致性
- **补偿机制**：异常情况下提供数据补偿和修复机制
- **数据校验**：定期校验业务数据的一致性和正确性
- **异常监控**：实时监控业务异常和数据异常
- **恢复策略**：制定数据异常的恢复策略和操作手册

### 系统级异常处理
- **全局异常捕获**：实现全局异常处理机制，避免系统崩溃
- **异常分类处理**：根据异常类型采用不同的处理策略
- **异常日志记录**：详细记录异常信息，便于问题定位
- **用户友好提示**：向用户返回友好的错误提示信息
- **异常恢复机制**：制定异常情况下的自动恢复机制

## WebSocket服务配置和管理规范

### WebSocket服务初始化配置规范
- **路径配置标准化**：WebSocket服务必须配置明确的路径：path: '/ws'
- **跨域配置**：正确配置CORS，支持小程序和Web端访问
- **连接认证**：实现Token验证机制确保连接安全性
- **心跳机制**：配置合理的心跳间隔维持连接稳定性
- **连接数限制**：设置合理的并发连接数限制

### WebSocket域名配置管理
- **小程序域名要求**：微信小程序socket合法域名必须配置为：wss://domain.com
- **协议要求**：生产环境强制使用wss://加密连接，开发环境支持ws://
- **路径一致性**：确保前后端WebSocket路径配置一致
- **域名变更管理**：域名变更时同步更新前端配置和文档
- **SSL证书管理**：确保wss://连接的SSL证书有效

### WebSocket服务重启和恢复
- **优雅重启**：服务重启前正确关闭现有WebSocket连接
- **配置热加载**：支持WebSocket配置的热加载，减少重启需求
- **连接状态管理**：维护连接状态，支持断线重连
- **消息队列处理**：处理重启期间的消息队列和数据恢复
- **监控告警**：WebSocket服务异常时及时告警和处理

### WebSocket健康检查规范
- **服务状态监控**：健康检查接口必须包含WebSocket服务状态
- **连接数监控**：实时监控活跃连接数和连接质量
- **性能指标监控**：监控消息延迟、吞吐量等性能指标
- **异常连接清理**：定期清理异常断开的连接资源
- **负载均衡支持**：支持WebSocket的负载均衡和故障转移

**增强核心原则**：数据一致性优先、配置标准化、异常可恢复、性能可监控、业务逻辑清晰、用户体验友好

## WebSocket路径配置缺失问题专项规范

### WebSocket路径配置检查清单
- WebSocket服务初始化时必须明确指定path参数：path: '/ws'
- 服务启动日志必须输出WebSocket路径信息：console.log('WebSocket路径: /ws')
- 微信小程序连接地址格式验证：wss://domain.com/ws
- 开发环境ws://localhost:3000/ws本地测试验证
- WebSocket路径变更后必须重启Node.js服务才能生效

### WebSocket服务配置验证流程
- 步骤1：检查services/websocket.js中的路径配置
- 步骤2：验证WebSocket服务初始化代码正确性
- 步骤3：重启服务后检查启动日志中的路径信息
- 步骤4：使用健康检查端点验证WebSocket服务状态
- 步骤5：前端连接测试验证WebSocket可用性

### WebSocket连接失败快速诊断
- 检查1：服务端路径配置 - path: '/ws' 是否存在
- 检查2：服务重启状态 - 配置修改后是否重启服务
- 检查3：域名白名单配置 - 微信小程序后台配置是否正确
- 检查4：SSL证书状态 - wss://连接的证书是否有效
- 检查5：防火墙端口 - WebSocket端口是否被阻止

## API测试和调试效率优化规范

### curl命令标准模板
- 基础GET请求：curl -s -m 30 "http://localhost:3000/api/endpoint"
- POST请求JSON：curl -s -m 30 -X POST -H "Content-Type: application/json" -d '{"key":"value"}' "http://localhost:3000/api/endpoint"
- 带认证请求：curl -s -m 30 -H "Authorization: Bearer token" "http://localhost:3000/api/endpoint"
- 格式化输出：curl -s -m 30 "http://localhost:3000/api/endpoint" | python -m json.tool | head -20
- 错误处理：curl -s -m 30 "http://localhost:3000/api/endpoint" || echo "API请求失败，请检查服务状态"

### API状态批量检查规范
- 健康检查：curl -s -m 10 "http://localhost:3000/health"
- 认证端点：curl -s -m 10 -X POST "http://localhost:3000/api/auth/login" -H "Content-Type: application/json" -d '{}'
- 用户信息：curl -s -m 10 "http://localhost:3000/api/user/info" -H "Authorization: Bearer test-token"
- 抽奖配置：curl -s -m 10 "http://localhost:3000/api/lottery/config"
- 批量检查失败时立即检查路由定义和服务状态

### JSON响应处理优化
- 大JSON响应限制显示：| head -20 或 | tail -20
- 关键字段提取：| grep -E '"(code|msg|status|error)"'
- 格式化显示：| python -m json.tool（如果可用）
- 错误信息过滤：| grep -v "deprecation\|warning"
- 响应时间测试：curl -w "@curl-format.txt" -s -o /dev/null "url"

## 服务重启和验证标准化流程

### Node.js服务重启标准流程
- 步骤1：检查当前进程状态 - ps aux | grep "node.*app.js"
- 步骤2：终止现有进程 - pkill -f "node.*app.js"
- 步骤3：等待端口释放 - sleep 3 && netstat -tlnp | grep :3000
- 步骤4：启动后台服务 - nohup node app.js > server.log 2>&1 &
- 步骤5：验证服务健康 - sleep 5 && curl -s "http://localhost:3000/health"

### 服务状态验证检查点
- 检查点1：进程运行状态 - ps aux | grep node
- 检查点2：端口监听状态 - netstat -tlnp | grep :3000
- 检查点3：健康检查响应 - curl -s "http://localhost:3000/health"
- 检查点4：日志错误检查 - tail -10 server.log | grep -i error
- 检查点5：WebSocket服务状态 - 健康检查中websocket字段验证

### 常见服务启动问题快速修复
- EADDRINUSE错误：pkill -f "node.*app.js" && sleep 3 && 重启
- 端口占用问题：netstat -tlnp | grep :3000 && kill -9 PID
- 配置文件错误：检查.env文件和config目录完整性
- 依赖模块缺失：npm install 或 yarn install 重新安装
- 数据库连接失败：检查数据库服务状态和连接字符串

## 微信小程序后端适配规范

### 域名白名单配置验证
- request合法域名：https://domain.com
- socket合法域名：wss://domain.com  
- downloadFile合法域名：https://domain.com
- uploadFile合法域名：https://domain.com
- 配置完成后需要重新发布小程序才生效

### 小程序网络请求特殊处理
- 所有API必须支持HTTPS访问
- WebSocket必须使用wss://加密连接
- 响应头必须包含正确的CORS配置
- 错误状态码必须符合小程序规范
- 接口响应时间优化，避免小程序超时

### 小程序调试和测试规范
- 开发者工具网络面板监控请求状态
- 真机调试验证域名白名单配置
- 线上版本发布前完整接口测试
- 网络异常情况下的降级处理
- 小程序审核要求的接口安全性检查

**专项核心原则**：配置明确、验证完整、问题快修、小程序适配、用户体验优先

## 抽奖业务逻辑规范

### 批量抽奖积分扣除规范
- **5连抽积分扣除逻辑**：5连抽必须一次性扣除500积分（5 × 100积分），不能循环扣除
- **积分扣除时机**：必须在抽奖开始前一次性扣除全部积分，而不是每次抽奖扣除
- **积分不足处理**：检查用户积分是否足够支付全部抽奖费用，不足时拒绝抽奖并返回明确错误
- **积分回滚机制**：抽奖过程中出现异常时，必须回滚已扣除的积分
- **积分扣除记录**：每次积分扣除必须记录详细的操作日志，包括用户ID、扣除数量、时间戳

### 抽奖类型参数映射规范
- **抽奖类型标识**：明确区分单抽(type=1)和5连抽(type=5)的处理逻辑
- **费用计算映射**：
  * 单抽：100积分，调用1次performDraw()
  * 5连抽：500积分，调用5次performDraw()但只扣除一次总费用
- **参数验证**：抽奖类型参数必须在有效范围内，无效参数时返回错误
- **业务逻辑分离**：积分扣除逻辑与抽奖逻辑分离，避免循环扣除问题
- **类型扩展性**：支持未来添加新的抽奖类型（如10连抽）

### 抽奖结果数据规范
- **结果数据结构**：统一的抽奖结果数据结构，包含奖品信息、剩余积分、抽奖次数等
- **批量结果处理**：5连抽返回数组形式的结果，每个元素包含单次抽奖详情
- **保底机制结果**：保底触发时明确标识触发原因和特殊奖励
- **概率信息透明**：返回结果中包含概率信息，增强用户体验
- **统计信息更新**：每次抽奖后更新用户的抽奖统计信息

### 每日限制配置规范
- **配置优先级**：环境变量DAILY_LOTTERY_LIMIT > 配置文件 > 代码默认值
- **配置一致性检查**：启动时检查不同位置的限制配置，确保一致性
- **默认值标准化**：
  * 新用户每日限制：50次（DAILY_LOTTERY_LIMIT=50）
  * 测试环境限制：可以设置为较小值便于测试
  * 生产环境限制：严格按照运营策略设置
- **限制重置时机**：每日0点重置限制，考虑服务器时区设置
- **限制检查逻辑**：抽奖前检查当日已抽次数，超过限制时拒绝抽奖

### 环境变量配置错误处理规范
- **.env文件配置检查**：
  * DAILY_LOTTERY_LIMIT=50（而不是10）
  * LOTTERY_COST_POINTS=100
  * LOTTERY_GUARANTEED_COUNT=20
- **配置验证机制**：启动时验证所有环境变量的有效性
- **配置冲突解决**：发现配置冲突时，按照优先级自动选择或提示用户
- **配置更新影响**：配置变更后评估对现有用户的影响
- **配置文档同步**：环境变量变更时同步更新配置文档

### 抽奖业务异常处理增强规范
- **积分不足错误**：返回code=4001，msg="积分不足，当前积分：XX，需要：XX"
- **次数限制错误**：返回code=4002，msg="今日抽奖次数已达上限，已抽：XX次，限制：XX次"
- **参数错误**：返回code=4003，msg="抽奖类型参数无效，支持类型：1(单抽)、5(五连抽)"
- **系统异常**：返回code=5000，msg="系统繁忙，请稍后重试"，同时记录详细错误日志
- **数据库异常**：事务失败时自动回滚，避免数据不一致

### 抽奖配置管理规范
- **奖品概率配置**：支持动态调整奖品概率，便于运营活动
- **保底机制配置**：保底次数、保底奖品等参数可配置
- **时间限制配置**：支持设置抽奖活动的开始和结束时间
- **用户级别配置**：不同用户等级可能有不同的抽奖规则
- **A/B测试支持**：支持对不同用户群体使用不同的抽奖配置

### 抽奖数据监控和统计规范
- **实时监控指标**：
  * 每日抽奖次数
  * 各类奖品中奖率
  * 用户积分消耗统计
  * 抽奖接口响应时间
- **异常检测**：
  * 中奖率异常（过高或过低）
  * 单用户抽奖次数异常
  * 积分消耗异常
- **数据报表生成**：定期生成抽奖数据报表，支持运营决策
- **用户行为分析**：分析用户抽奖行为，优化抽奖体验

### 抽奖业务测试规范
- **单元测试覆盖**：
  * 积分扣除逻辑测试
  * 抽奖次数限制测试
  * 不同抽奖类型测试
  * 保底机制测试
- **集成测试覆盖**：
  * 完整抽奖流程测试
  * 并发抽奖测试
  * 异常情况处理测试
- **性能测试**：
  * 高并发抽奖测试
  * 大用户量抽奖测试
  * 数据库性能测试
- **数据一致性测试**：
  * 积分扣除一致性测试
  * 抽奖结果一致性测试
  * 统计数据一致性测试

**抽奖业务核心原则**：积分扣除准确、类型映射清晰、配置管理规范、异常处理完善、数据监控全面、测试覆盖充分
