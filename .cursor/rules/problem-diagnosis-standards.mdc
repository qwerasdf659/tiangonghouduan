---
description: 
globs: 
alwaysApply: false
---
# 问题诊断标准化规则
# 解决问题定位缓慢和诊断混乱问题

## 核心问题分析
通过对实际会话的深度分析，发现以下严重的诊断问题：
- 问题定位时间过长：平均15-20分钟
- 诊断方向错误：30%的时间浪费在错误方向
- 缺乏标准化流程：每次都重新设计诊断流程
- 症状和根因混淆：治标不治本

## 快速问题分类系统

### 问题类型快速识别
- **A类问题（配置问题）**：
  - 症状：启动失败、连接拒绝、权限错误
  - 特征：错误信息明确、影响范围局限
  - 定位时间：30秒-1分钟
  - 解决时间：1-2分钟

- **B类问题（服务问题）**：
  - 症状：服务无响应、端口占用、进程异常
  - 特征：系统级错误、服务状态异常
  - 定位时间：1-2分钟
  - 解决时间：3-5分钟

- **C类问题（代码问题）**：
  - 症状：逻辑错误、数据异常、API错误
  - 特征：业务逻辑相关、数据处理错误
  - 定位时间：2-3分钟
  - 解决时间：5-10分钟

- **D类问题（环境问题）**：
  - 症状：依赖缺失、版本冲突、系统不兼容
  - 特征：环境相关、跨系统问题
  - 定位时间：3-5分钟
  - 解决时间：10-15分钟

### 问题严重程度评估
- **P0（系统崩溃）**：系统完全不可用
- **P1（核心功能失败）**：主要功能不可用
- **P2（功能异常）**：部分功能异常
- **P3（性能问题）**：功能可用但性能差
- **P4（体验问题）**：功能正常但体验不佳

## 标准化诊断流程

### 5分钟快速诊断法
**第1分钟：症状收集**
- 收集错误信息和现象描述
- 确定问题的影响范围和紧急程度
- 识别问题发生的时间和触发条件

**第2分钟：环境检查**
- 并行检查：系统状态、进程状态、网络状态
- 验证：服务运行状态、端口占用、资源使用
- 确认：配置文件、环境变量、依赖版本

**第3分钟：日志分析**
- 查看：错误日志、系统日志、应用日志
- 筛选：关键错误信息、异常堆栈、警告信息
- 时间线：构建问题发生的时间线

**第4分钟：根因分析**
- 关联：症状与可能原因的关联分析
- 排除：排除不可能的原因
- 定位：确定最可能的根本原因

**第5分钟：解决方案**
- 制定：针对根因的解决方案
- 评估：解决方案的风险和影响
- 准备：执行解决方案的准备工作

### 并行诊断策略
- **系统层面**：并行检查系统状态、资源使用、网络连接
- **应用层面**：并行检查应用状态、配置、日志
- **数据层面**：并行检查数据库状态、数据一致性
- **网络层面**：并行检查网络连接、DNS解析、防火墙

### 诊断决策树
```
问题报告
├── 是否能启动？
│   ├── 否 → 配置问题（A类）
│   └── 是 → 继续
├── 是否有网络连接？
│   ├── 否 → 网络问题（B类）
│   └── 是 → 继续
├── 是否有错误日志？
│   ├── 是 → 代码问题（C类）
│   └── 否 → 性能问题（D类）
```

## 常见问题模式识别

### 数据库相关问题
- **连接问题**：连接超时、连接拒绝、认证失败
- **查询问题**：慢查询、锁等待、死锁
- **数据问题**：数据不一致、约束违反、字段缺失

### 网络服务问题
- **端口问题**：端口占用、端口未监听、防火墙阻止
- **协议问题**：HTTP错误、WebSocket连接失败
- **DNS问题**：域名解析失败、缓存问题

### 配置相关问题
- **环境变量**：变量未设置、变量值错误
- **配置文件**：文件不存在、格式错误、权限问题
- **依赖问题**：依赖缺失、版本冲突、路径错误

### 权限和安全问题
- **文件权限**：读写权限、执行权限
- **用户权限**：用户不存在、权限不足
- **安全策略**：防火墙规则、安全组配置

## 诊断工具和技术

### 系统诊断工具
- **进程监控**：`ps aux`, `htop`, `systemctl status`
- **网络检查**：`netstat`, `ss`, `ping`, `telnet`
- **资源监控**：`free`, `df`, `iostat`, `top`
- **日志分析**：`tail`, `grep`, `journalctl`, `dmesg`

### 应用诊断工具
- **Node.js**：`node --version`, `npm list`, `pm2 logs`
- **数据库**：`mysql -u root -p`, `SHOW PROCESSLIST`
- **Web服务**：`curl`, `wget`, `httpie`
- **文件检查**：`ls`, `cat`, `head`, `tail`

### 并行诊断命令组合
```bash
# 系统状态并行检查
ps aux | grep node & 
netstat -tlnp | grep :3000 & 
df -h & 
free -h & 
wait

# 应用状态并行检查
curl -s http://localhost:3000/health &
tail -20 /var/log/app.log &
pm2 status &
wait
```

## 问题定位技巧

### 二分法定位
- 将问题范围逐步缩小
- 通过排除法确定问题区域
- 从最可能的原因开始验证

### 日志分析技巧
- **时间定位**：根据时间戳定位问题发生时间
- **关键词搜索**：搜索ERROR、WARN、FAIL等关键词
- **上下文分析**：分析错误前后的相关日志
- **频率分析**：分析错误发生的频率和规律

### 对比分析方法
- **环境对比**：对比不同环境的配置差异
- **时间对比**：对比问题发生前后的状态变化
- **版本对比**：对比不同版本的行为差异

## 根因分析方法

### 5个为什么法
- 问题：为什么服务无法启动？
- 原因1：为什么端口被占用？
- 原因2：为什么之前的进程没有正常关闭？
- 原因3：为什么进程关闭异常？
- 原因4：为什么没有正确的关闭信号？
- 原因5：为什么脚本没有处理信号？

### 鱼骨图分析
```
问题：系统响应缓慢
├── 人员因素
│   ├── 配置错误
│   └── 操作失误
├── 技术因素
│   ├── 代码问题
│   └── 架构问题
├── 环境因素
│   ├── 资源不足
│   └── 网络问题
└── 流程因素
    ├── 部署问题
    └── 监控缺失
```

### 故障树分析
- 顶事件：系统故障
- 中间事件：各种可能的原因
- 底事件：基本的故障原因

## 解决方案评估

### 解决方案风险评估
- **影响范围**：评估解决方案对系统的影响范围
- **风险等级**：评估解决方案的风险等级
- **回滚计划**：制定解决方案的回滚计划
- **测试验证**：设计解决方案的测试验证方法

### 解决方案优先级
- **紧急程度**：根据问题的紧急程度确定优先级
- **影响程度**：根据问题的影响程度确定优先级
- **解决难度**：根据解决方案的难度确定优先级
- **资源需求**：根据资源需求确定优先级

### 解决方案实施标准
- **准备阶段**：准备必要的工具和资源
- **执行阶段**：按计划执行解决方案
- **验证阶段**：验证解决方案的效果
- **总结阶段**：总结经验教训和改进建议

## 质量保证机制

### 诊断质量检查
- **准确性**：诊断结果的准确性
- **完整性**：诊断过程的完整性
- **及时性**：诊断过程的及时性
- **有效性**：诊断结果的有效性

### 诊断效率监控
- **诊断时间**：从问题报告到根因确定的时间
- **解决时间**：从根因确定到问题解决的时间
- **准确率**：诊断结果的准确率
- **重复率**：重复诊断的比率

### 持续改进机制
- **问题模式分析**：分析常见问题模式
- **诊断方法优化**：优化诊断方法和流程
- **工具效率提升**：提升诊断工具的效率
- **知识库建设**：建设问题诊断知识库

## 特殊问题处理

### 复杂问题诊断
- **多因素问题**：同时存在多个原因的问题
- **间歇性问题**：偶发性或间歇性的问题
- **性能问题**：响应缓慢或性能下降的问题
- **兼容性问题**：不同系统或版本间的兼容性问题

### 紧急问题处理
- **快速响应**：紧急问题的快速响应机制
- **临时措施**：紧急情况下的临时处理措施
- **风险控制**：紧急处理的风险控制措施
- **事后分析**：紧急处理后的事后分析

### 预防性诊断
- **健康检查**：定期的系统健康检查
- **预警机制**：问题的预警和预防机制
- **风险评估**：定期的风险评估和预防
- **改进建议**：基于诊断结果的改进建议

## 诊断报告标准

### 报告格式标准
- **问题描述**：清晰描述问题的症状和影响
- **诊断过程**：详细记录诊断的过程和方法
- **根因分析**：明确说明问题的根本原因
- **解决方案**：提供具体的解决方案和步骤
- **验证结果**：验证解决方案的效果
- **预防建议**：给出预防类似问题的建议

### 报告质量要求
- **准确性**：报告内容的准确性
- **完整性**：报告信息的完整性
- **清晰性**：报告表达的清晰性
- **可操作性**：报告建议的可操作性

**核心原则**：快速定位、准确诊断、系统思考、持续改进、预防优先
