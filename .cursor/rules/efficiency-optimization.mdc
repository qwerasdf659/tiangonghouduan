---
description: 
globs: 
alwaysApply: false
---
# 工具调用效率优化规则
# 基于会话效率分析和Claude 4 Sonnet成本控制

## 核心问题分析
通过对实际会话的深度分析，发现以下严重的效率问题：
- 重复工具调用次数：30-40次
- 浪费的请求次数：50-70次Claude 4 Sonnet调用
- 文档冗余度：300%以上
- 并行处理利用率：<30%

## 工具调用次数控制规范

### 严禁重复工具调用
- **同一会话中避免对相同内容进行重复的状态检查、文件读取、命令执行**
- **关键系统状态检查结果应缓存使用，避免在同一会话中重复验证**
- **工具调用前评估必要性，确保不是重复或冗余操作**
- **限制验证频率**：同类验证操作在单个会话中不超过2次，除非确实需要验证变更结果

### 状态检查去重机制
- **建立检查清单**：会话开始时建立已完成检查项目清单，避免重复验证
- **状态变更触发**：仅在相关操作完成后重新检查状态，而非每次操作前都检查
- **集中状态验证**：将多个相关状态检查集中在一次工具调用中完成
- **避免冗余确认**：对已确认正常的服务状态，除非有错误发生否则不重复检查

### 工具调用效率监控
- **效率指标跟踪**：跟踪工具调用成功率、重复率、并行化率等关键指标
- **失败分析机制**：工具调用失败时立即分析原因，制定针对性的替代方案
- **时间效率要求**：单次工具调用操作时间不超过30秒，长操作必须分段或后台执行
- **请求次数预算**：为每类任务设定合理的工具调用次数预算，超出时进行优化

## 并行工具调用最大化规范

### 并行处理强制要求
- **系统状态检查并行化**：端口占用、进程状态、健康检查等独立检查必须并行执行
- **文件操作并行化**：存在性检查与内容读取、多个配置文件读取可以并行进行
- **网络请求并行化**：多个API端点测试、多个服务健康检查必须并行执行
- **数据库操作并行化**：不相关的数据库查询可以并行执行
- **信息收集并行化**：所有独立的信息收集任务必须并行执行

### 并行处理执行规范
- **默认并行原则**：除非有明确的依赖关系，否则所有工具调用都应并行执行
- **串行限制条件**：只有当工具B的输入确实需要工具A的输出时，才能串行执行
- **并行调用限制**：同时执行的并行工具调用建议不超过5个，避免系统资源耗尽
- **错误处理并行**：并行工具调用中的错误处理不应影响其他并行任务的执行

### 并行效率优化策略
- **批量操作优化**：多个独立的检查操作必须使用并行工具调用，避免串行等待
- **预分析策略**：在工具调用前分析所有需要的信息，一次性并行获取
- **避免假并行**：确保声称的并行操作确实是真正的并行，而不是顺序包装
- **并行化率目标**：独立操作的并行化率应达到80%以上

## 智能重试策略规范

### 重试逻辑优化
- **智能重试机制**：工具调用失败时分析失败原因，避免盲目重试浪费请求次数
- **重试次数限制**：同类操作重试不超过2次，不同方法重试不超过3次
- **替代方案机制**：重试失败时立即切换到替代方案，而非无限重试
- **错误类型分类**：根据错误类型选择重试策略或直接切换方案

### 故障转移机制
- **工具切换策略**：主工具失败时立即切换到备用工具（如file_search → grep_search）
- **方法降级策略**：复杂操作失败时降级到简单操作（如并行 → 串行）
- **用户提示机制**：无法自动恢复时及时提示用户介入

## 效率测量和优化指标

### 关键效率指标
- **工具调用效率**：成功率 >90%，重复率 <10%，并行化率 >80%
- **会话完成时间**：问题定位时间 <5分钟，总解决时间目标
- **成本控制指标**：单次会话工具调用次数控制在合理范围内

### 持续优化机制
- **效率分析记录**：记录工具调用模式和效率指标
- **问题模式识别**：识别重复出现的低效模式
- **优化策略更新**：定期更新优化策略和最佳实践
- **知识库建设**：建立高效工具调用的知识库和模板

## 实施检查清单

### 每次会话开始前
- [ ] 明确会话目标和所需信息
- [ ] 分析哪些操作可以并行执行
- [ ] 建立已完成检查项目清单
- [ ] 设定工具调用次数预算

### 每次工具调用前
- [ ] 检查是否为重复调用
- [ ] 评估是否可以并行执行
- [ ] 确认调用的必要性
- [ ] 预估调用时间和成本

### 每次会话结束后
- [ ] 统计工具调用次数和效率
- [ ] 分析是否存在重复或冗余调用
- [ ] 识别可以并行化的操作
- [ ] 记录优化建议和改进点

**核心原则**：效率优先、避免重复、并行最大化、成本控制、持续优化
