---
description: 
globs: 
alwaysApply: true
---
# 会话工作流程标准
# 基于实际会话分析，解决信息重复和流程混乱问题

## 核心问题分析
通过对实际会话的深度分析，发现以下严重的流程问题：
- 信息重复率：300-500%
- 简单问题复杂化：本可50行解决，实际生成1000+行
- 缺乏标准化模板：每次都重新设计流程
- 重点信息掩盖：核心信息被细节掩盖

## 会话开始标准化流程

### 任务理解和目标确认
- **5分钟规则**：任务理解和目标确认必须在5分钟内完成
- **明确性原则**：明确说明会话目标、预期结果、时间预估
- **范围界定**：明确任务边界，避免范围蔓延
- **优先级设定**：识别关键任务和次要任务的优先级

### 快速项目类型识别
- **30秒识别**：通过关键文件快速识别项目类型
- **技术栈确认**：确认使用的框架、语言、工具链
- **环境分析**：确认开发、测试、生产环境差异
- **依赖检查**：快速验证关键依赖的可用性

### 问题分类和处理策略
- **A类问题（紧急配置）**：立即修复，1-2分钟解决
- **B类问题（服务异常）**：重启恢复，3-5分钟解决
- **C类问题（代码逻辑）**：代码修改，5-10分钟解决
- **D类问题（系统环境）**：环境重建，10-15分钟解决

## 信息收集标准化流程

### 并行信息收集策略
- **信息预分析**：在收集前分析需要哪些信息
- **批量并行收集**：所有独立信息必须并行收集
- **分层收集原则**：先收集关键信息，再收集补充信息
- **信息去重机制**：避免收集重复或冗余信息

### 状态检查去重机制
- **一次性检查**：同类状态检查在单次会话中只执行一次
- **检查结果缓存**：重要状态检查结果必须缓存使用
- **变更触发机制**：只有在状态可能变更后才重新检查
- **批量状态验证**：相关状态检查集中在一次操作中完成

### 信息整理和呈现
- **关键信息优先**：重要信息前置，细节信息后置
- **结构化呈现**：使用标准格式呈现分析结果
- **进度可视化**：提供清晰的任务完成进度
- **结果摘要**：每个阶段提供简洁的结果摘要

## 问题解决标准化流程

### 快速问题诊断（5分钟内）
1. **症状识别**（30秒）：快速识别问题症状和影响范围
2. **环境检查**（1分钟）：并行检查服务状态、配置、日志
3. **根因分析**（2分钟）：基于症状和环境快速定位根因
4. **方案选择**（1分钟）：选择最优解决方案
5. **风险评估**（30秒）：评估修复方案的风险和影响

### 解决方案执行标准
- **原子操作原则**：将复杂修复分解为独立的原子操作
- **检查点机制**：关键步骤前后设置检查点
- **并行执行优化**：独立修复操作必须并行执行
- **实时验证机制**：每个修复步骤后立即验证效果

### 修复验证和确认
- **功能验证**：验证核心功能是否恢复正常
- **性能检查**：确认修复后系统性能无退化
- **副作用检查**：检查修复是否引入新问题
- **文档更新**：更新相关配置和操作文档

## 文档生成优化流程

### 文档长度控制机制
- **50行原则**：简单问题解决文档不超过50行
- **200行限制**：复杂问题解决文档不超过200行
- **500行上限**：系统性问题文档不超过500行
- **冗余检测**：自动检测和删除重复信息

### 内容结构标准化
- **执行摘要**：开头提供3-5行的执行摘要
- **问题描述**：简洁描述问题现象和影响
- **解决方案**：具体的修复步骤和命令
- **验证结果**：修复效果的验证结果
- **后续建议**：预防类似问题的建议

### 信息去重和精简
- **核心信息提取**：只保留解决问题必需的信息
- **过程信息压缩**：将详细过程压缩为关键步骤
- **技术细节分层**：核心流程 + 技术细节（可选展开）
- **重复内容合并**：合并相似或重复的信息块

## 项目类型识别和环境分析规范

### 项目类型快速识别机制
- 任务开始前必须先进行项目类型识别和环境分析
- 检查项目根目录关键文件：package.json、app.js、project.config.json、requirements.txt等
- 根据文件特征判断项目类型：
  * Node.js后端：package.json + app.js/server.js + routes/目录
  * 微信小程序：project.config.json + app.json + pages/目录 + utils/目录
  * Python项目：requirements.txt + app.py/main.py
  * React前端：package.json + src/目录 + public/目录
- 避免基于任务描述盲目假设项目类型
- 项目类型确认后制定对应的分析策略

### 目录结构预分析规范
- 使用list_dir先查看项目根目录结构
- 识别关键目录和文件模式：
  * 后端项目：routes/, models/, controllers/, middleware/
  * 前端项目：src/, components/, pages/, utils/
  * 全栈项目：frontend/, backend/, client/, server/
- 避免盲目搜索不存在的文件和目录
- 基于实际目录结构调整搜索策略

### 环境和技术栈识别
- 检查package.json了解依赖和脚本
- 分析启动命令和构建工具
- 识别使用的框架和技术栈
- 确认开发和生产环境配置
- 避免使用不匹配的工具和命令

## 网络请求和API测试优化规范

### API端点验证标准流程
- 测试前先检查路由定义：grep -r "app.get\|router.get" routes/
- 健康检查端点优先级：/health > /api/health > /status
- 使用curl -s测试避免冗长输出，需要详细信息时使用-v
- API测试失败时立即检查backend路由而非重复请求
- 建立常用端点的验证缓存，避免重复测试

### JSON数据处理规范
- curl返回JSON时检查数据完整性，避免截断影响分析
- jq不可用时使用python -m json.tool格式化
- 大JSON响应使用head/tail限制显示长度
- 关键字段提取使用grep而非依赖完整JSON解析
- 建立JSON处理工具的备选方案

### 网络请求超时和重试
- 所有curl请求设置合理超时：curl -m 30
- 失败请求最多重试2次，避免无限重试
- 网络问题和配置问题区分处理
- 超时请求提供诊断信息和解决建议
- 建立网络请求成功率监控

## 工具调用中断处理和恢复规范

### 并行工具调用限制
- 同时执行的并行工具调用不超过3个
- 文件搜索类工具（file_search, grep_search）不并行执行
- 用户交互期间暂停新的工具调用
- 工具调用被中断时立即分析原因
- 建立工具调用优先级队列

### 中断检测和恢复机制
- 工具调用返回"Error: no result from tool"时立即停止相关操作
- 分析中断原因：用户主动中断 vs 系统超时
- 中断后重新评估任务策略，避免重复相同操作
- 提供任务进度保存和恢复机制
- 建立中断情况下的优雅降级方案

### 文件搜索策略优化
- file_search失败时立即切换到grep_search精确搜索
- 避免全项目范围的模糊搜索，优先精确模式搜索
- 使用list_dir确认目录存在后再进行文件搜索
- 建立文件搜索的备选方案和降级策略
- 搜索范围逐步扩大而非一次性全局搜索

## 长时间执行命令和会话中断优化规范

### 命令执行时间监控和中断处理
- 所有可能超过30秒的命令必须使用timeout包装：timeout 120s command
- 后台执行命令使用nohup和重定向：nohup command > output.log 2>&1 &
- 长时间命令执行前必须告知用户预期时间和可能的中断原因
- 命令中断时立即分析中断原因：用户主动中断 vs 系统超时 vs 网络问题
- 提供命令中断后的恢复机制和替代方案

### 会话状态保持和恢复规范
- 关键操作前保存当前会话状态和已完成步骤
- 使用检查点机制记录重要的中间结果
- 会话中断后能够从最近检查点恢复而非重新开始
- 避免重复执行已完成的检查和验证步骤
- 建立会话恢复的标准化流程

### 后台进程管理和监控
- 后台进程启动后立即记录进程ID和状态
- 定期检查后台进程运行状态：ps aux | grep process_name
- 后台进程异常终止时提供详细的错误信息和解决方案
- 会话结束前清理所有临时后台进程
- 建立后台进程的生命周期管理机制

## 会话质量控制机制

### 效率指标监控
- **时间控制**：问题定位<5分钟，解决<15分钟，文档<5分钟
- **工具调用控制**：单次会话工具调用<20次
- **重复率控制**：信息重复率<10%
- **完成率控制**：任务完成率>95%

### 质量检查清单
- [ ] 问题是否准确定位？
- [ ] 解决方案是否有效？
- [ ] 文档是否简洁明了？
- [ ] 是否存在重复信息？
- [ ] 用户是否能够理解和执行？

### 持续改进机制
- **模式识别**：识别重复出现的问题模式
- **模板优化**：基于实际使用优化标准模板
- **流程改进**：定期回顾和改进工作流程
- **知识积累**：建立问题解决方案知识库

## 用户体验优化标准

### 沟通效率优化
- **期望管理**：明确告知用户预期时间和结果
- **进度反馈**：定期更新任务进度和状态
- **问题说明**：用通俗语言解释技术问题
- **操作指导**：提供清晰的操作步骤和命令

### 错误处理标准化
- **错误分类**：按影响程度和紧急程度分类错误
- **恢复机制**：提供标准的错误恢复流程
- **预防建议**：给出预防类似问题的建议
- **替代方案**：主方案失败时提供备选方案

### 结果确认机制
- **功能验证**：验证修复效果是否符合预期
- **性能确认**：确认系统性能无负面影响
- **用户确认**：获得用户对修复结果的确认
- **文档交付**：提供简洁的操作记录和建议

## 特殊场景处理规范

### 复杂问题处理
- **问题分解**：将复杂问题分解为独立子问题
- **优先级排序**：按影响程度和解决难度排序
- **阶段性处理**：分阶段解决，每阶段独立验证
- **风险控制**：高风险操作前充分评估和备份

### 中断恢复机制
- **状态保存**：关键节点自动保存会话状态
- **快速恢复**：中断后能快速恢复到最近状态
- **上下文重建**：简洁重建必要的上下文信息
- **进度继承**：避免重复已完成的工作

### 多任务协调
- **任务队列**：建立清晰的任务优先级队列
- **依赖管理**：识别和管理任务间的依赖关系
- **并行处理**：独立任务并行处理，提高效率
- **统一交付**：统一整理和交付所有任务结果

## 实施检查清单

### 会话开始前
- [ ] 明确会话目标和成功标准
- [ ] 估算任务复杂度和预期时间
- [ ] 识别关键风险点和应对策略
- [ ] 准备必要的检查和验证机制

### 会话进行中
- [ ] 定期检查任务进度和质量
- [ ] 识别和消除重复操作
- [ ] 保持文档结构清晰简洁
- [ ] 及时向用户反馈进度和问题

### 会话结束前
- [ ] 验证所有任务目标已达成
- [ ] 检查文档质量和可读性
- [ ] 确认用户对结果满意
- [ ] 记录经验教训和改进建议

**核心原则**：效率优先、结构清晰、信息精简、用户至上、持续改进

## 基于实际会话问题的流程优化规范

### 前端vs后端问题快速识别机制
- **接口路径错误快速判断**：发现API 404错误时，优先检查前端调用路径与后端路由定义的匹配性
- **网络连接问题分类诊断**：区分前端网络配置问题和后端服务问题，避免混合诊断
- **错误信息源头追踪**：明确标识错误来源（前端请求、后端响应、网络连接），避免错误归因
- **问题责任界定标准**：建立明确的前后端问题责任界定标准，避免重复验证

### 文档配置错误批量检测和修复
- **占位符域名自动检测**：建立自动检测文档中domain.com、your-domain.com等占位符的机制
- **配置一致性验证**：定期验证文档、代码、配置文件中域名配置的一致性
- **批量修复策略**：发现配置错误时优先批量修复，避免逐个文件修复
- **配置变更影响评估**：配置修复前评估对系统其他部分的影响

### 会话中断和恢复优化
- **关键状态保存机制**：每完成一个重要任务后立即保存会话状态
- **检查点设置策略**：在关键操作前后设置检查点，支持快速恢复
- **任务完成状态追踪**：维护详细的任务完成状态，避免重复执行
- **中断原因分析**：工具调用中断时立即分析原因，制定针对性恢复策略

### 效率问题根因分析和预防
- **重复操作模式识别**：识别会话中的重复操作模式，建立预防机制
- **时间消耗分析**：分析各类操作的时间消耗，优化高耗时操作
- **工具调用路径优化**：优化工具调用的执行路径，减少不必要的中间步骤
- **用户期望管理**：明确告知用户预期时间和可能的问题，减少等待焦虑

### 问题解决质量保证
- **解决方案验证标准**：每个解决方案必须经过功能验证、性能检查、副作用检查
- **问题复现预防**：解决问题后必须分析根因，制定预防措施避免再次发生
- **知识积累机制**：将解决方案和经验教训记录到知识库，支持未来类似问题的快速解决
- **用户满意度反馈**：及时收集用户对解决方案的反馈，持续改进问题解决质量

**核心原则**：快速定位、批量处理、状态保存、根因预防、质量保证
