---
description: 
globs: 
alwaysApply: true
---
# 编码处理和Git管理规范
# 文档编码、Git操作管理、文件状态验证等技术规范

## Git操作用户授权控制规范

### 敏感Git操作强制确认
- **禁止未经授权的Git操作**：任何git push、git commit、git merge、git rebase等操作前必须明确征得用户同意
- **操作风险评估**：执行前说明操作可能的影响范围和潜在风险
- **授权范围限制**：严格按照用户明确授权的范围执行git操作
- **操作确认模板**：使用标准化的确认询问格式
- **拒绝执行机制**：用户拒绝或未明确同意时立即停止操作

### Git操作分类和权限等级
- **高风险操作**：push、force-push、merge、rebase - 强制确认
- **中风险操作**：commit、branch创建、tag创建 - 建议确认  
- **低风险操作**：status、log、diff、show - 可直接执行
- **只读操作**：fetch、clone（新仓库）、remote -v - 可直接执行

### 操作前确认标准流程
1. **操作分类**：识别即将执行的git操作的风险等级
2. **风险提示**：说明操作可能产生的影响和后果
3. **用户确认**：明确询问用户是否同意执行该操作
4. **授权记录**：记录用户的授权决定
5. **执行监控**：按授权范围执行，超出范围立即停止

## Git分支冲突处理规范
- Git操作前必须先检查本地和远程分支状态：`git status` 和 `git remote -v`
- 发现分支分歧时优先评估冲突程度，选择合适的解决策略
- 对于开发分支，优先使用merge策略：`git config pull.rebase false`
- 对于功能分支，可以考虑rebase策略：`git config pull.rebase true`
- 强制推送仅在确认不会影响其他开发者时使用：`git push --force-with-lease`

## Git命令执行优化规范
- 长输出命令必须添加限制参数：`git log --oneline -10`
- 查看提交历史时使用格式化输出：`git log --pretty=format:"%h %s" -10`
- 避免使用可能产生大量输出的命令，如不带限制的`git log`
- 中文内容查看时使用合适的编码设置：`git config --global core.quotepath false`
- 大型仓库操作时设置合适的超时：`timeout 60s git command`

## Git文件管理规范
- 提交前必须检查.gitignore文件的完整性
- 临时文件和构建产物必须在.gitignore中明确排除
- 删除临时文件的标准流程：
  1. 检查文件类型和大小
  2. 确认文件不在版本控制中
  3. 批量删除：`rm -f *.tar.gz *.bundle *.tmp`
- 中文文件名处理时使用引号包围：`git add "中文文件名.md"`

## Git提交信息规范
- 提交信息必须使用有意义的描述
- 中文提交信息格式：`功能模块: 具体修改内容`
- 批量修改时提供详细的变更清单
- 重要功能变更必须在提交信息中说明影响范围

## Git远程仓库同步规范
- 推送前必须确认远程仓库状态和权限
- 大型推送使用进度显示：`git push --progress`
- 网络不稳定环境下设置重试机制：最多重试3次
- 推送完成后验证远程仓库状态：`git ls-remote origin`

## Git操作并行优化规范
- 以下Git检查操作必须并行执行：
  * `git status` 和 `git remote -v`
  * `git log --oneline -5` 和 `git branch -a`
  * 文件状态检查和远程仓库检查
- 独立的Git信息查询操作避免串行等待
- Git操作前的环境检查可以并行进行

## Git错误处理和恢复规范
- Git操作失败时提供具体的错误信息和解决方案
- 常见错误的标准处理流程：
  * 分支分歧：评估 → 选择策略 → 执行合并/rebase
  * 推送失败：检查权限 → 检查网络 → 重试推送
  * 合并冲突：标识冲突文件 → 手动解决 → 验证解决结果
- 关键Git操作后必须验证结果
- Git操作异常时提供回滚方案

## Git分页器和长输出命令卡死专项规范

### Git分页器卡死问题识别和预防
- Git命令卡在(END)...skipping...状态超过30秒时立即判定为分页器卡死
- 高风险命令清单：git log、git show、git diff、git blame、git help等
- 自动化环境中禁止使用交互式分页器，所有输出必须直接显示
- 分页器卡死的典型特征：命令行光标消失、无法输入、显示(END)提示
- 建立分页器问题的快速识别和解决机制

### Git命令防卡死标准配置
- 全局配置禁用分页器：git config --global core.pager ""
- 单次命令禁用分页器：git --no-pager log 或 git log | cat
- 限制输出长度的标准模式：git log --oneline -N（N为具体数字）
- 安全的Git命令格式模板：
  * git log --oneline -10 | cat
  * git show --name-only COMMIT | cat  
  * git diff --name-only | cat
  * git branch -a | cat
  * git remote -v | cat

### Git输出控制和性能优化
- 所有可能产生长输出的Git命令必须设置输出限制
- 大型仓库操作使用timeout包装：timeout 60s git command | cat
- Git历史查询优化：使用--since、--until、--max-count等参数限制范围
- 分支和标签查询优化：git branch --merged、git tag --merged等
- 建立Git命令执行时间监控和预警机制

## 文档编码处理规范

### 中文文件名标准化处理
- 所有中文文件名必须使用UTF-8编码
- 避免使用特殊字符和空格，优先使用连字符或下划线
- 文件名操作前必须验证编码：`python3 -c "print(repr('文件名'))"`
- 中文文件名在命令行操作时必须使用引号包围：`"中文文件名.md"`
- 避免在自动化脚本中直接处理包含中文的文件名

### 文件名编码检测和修复
- 检测文件名编码：`ls -la | python3 -c "import sys; [print(repr(line.strip())) for line in sys.stdin]"`
- 文件名编码转换：`python3 -c "import os; os.rename('旧名.md', '新名.md')"`
- 批量检查非ASCII文件名：`find . -name "*" | python3 -c "import sys; [print(f) for f in sys.stdin if any(ord(c) > 127 for c in f)]"`
- 标准化文件名建议：中文文档使用英文文件名 + 中文标题在文档内

## 文档内容编码规范

### UTF-8编码标准化
- 所有文档文件必须使用UTF-8无BOM编码
- 创建新文档时强制指定编码：`echo "内容" > 文件.md`
- 禁止使用带BOM的UTF-8编码，避免解析器异常
- 文档保存时验证编码格式：`file -i 文档.md`

### BOM标记检测和清理
- 检测BOM标记：`python3 -c "with open('file.md', 'rb') as f: data = f.read(3); print('有BOM' if data == b'\\xef\\xbb\\xbf' else '无BOM')"`
- 清理BOM标记：`python3 -c "with open('file.md', 'rb') as f: data = f.read(); open('file.md', 'wb').write(data[3:] if data[:3] == b'\\xef\\xbb\\xbf' else data)"`
- 批量BOM检测：`find . -name "*.md" -exec python3 -c "import sys; f=sys.argv[1]; data=open(f, 'rb').read(3); print(f, 'BOM' if data==b'\\xef\\xbb\\xbf' else 'OK')" {} \\;`
- 新建文档时禁用BOM：优先使用编程方式创建文档

### 编码转换标准流程
- 检测文档编码：`python3 -c "import chardet; print(chardet.detect(open('file.md', 'rb').read()))"`
- GBK转UTF-8：`python3 -c "with open('file.md', 'r', encoding='gbk') as f: content = f.read(); open('file.md', 'w', encoding='utf-8') as f2: f2.write(content)"`
- 批量编码转换：分文件类型处理，避免二进制文件损坏
- 转换后验证：对比转换前后的文档内容完整性

## 跨平台编码兼容性规范

### Windows与Linux编码对齐
- Windows环境强制使用UTF-8：`chcp 65001`（如适用）
- Linux环境验证locale设置：`locale | grep UTF-8`
- 跨平台文件传输时验证编码一致性
- 避免使用平台特定的编码格式（如Windows-1252）

### Git编码配置标准化
- 设置Git核心编码：`git config --global core.quotepath false`
- 设置Git提交信息编码：`git config --global i18n.commitencoding utf-8`
- 设置Git日志输出编码：`git config --global i18n.logoutputencoding utf-8`
- .gitattributes文件配置：`*.md text eol=lf`

### 编辑器编码设置规范
- VS Code设置：`"files.encoding": "utf8"`
- 禁用编辑器自动BOM添加功能
- 设置默认行结束符：LF（Unix风格）
- 配置编辑器显示不可见字符，便于发现编码问题

## 终端和命令行编码规范

### 终端编码环境设置
- 设置LANG环境变量：`export LANG=zh_CN.UTF-8`
- 验证终端编码支持：`echo "中文测试" | od -c`
- 配置终端字体支持中文显示
- SSH连接时保持编码环境一致性

### 命令行工具编码处理
- curl处理中文URL：使用URL编码或引号包围
- grep处理中文内容：`grep -P "中文" file.txt`
- sed处理中文替换：注意正则表达式编码
- find查找中文文件名：使用Python辅助脚本

### 脚本编码声明规范
- Python脚本顶部声明：`# -*- coding: utf-8 -*-`
- Shell脚本处理中文：使用`locale -a`确认支持
- Node.js处理编码：明确指定`encoding: 'utf8'`
- 所有脚本输出中文前验证终端编码支持

## 编码问题诊断和修复流程

### 快速诊断编码问题
- 第一步：检查文件编码类型：`file -i 文件名`
- 第二步：检查BOM标记：`od -c 文件名 | head -1`
- 第三步：检查内容编码：`python3 -c "import chardet; print(chardet.detect(open('文件名', 'rb').read()))"`
- 第四步：验证终端显示：`cat 文件名 | head -5`

### 标准修复流程
- BOM问题：使用Python脚本自动清理
- 编码转换：先备份原文件，再执行转换
- 文件名问题：重命名为英文，在文档内标注中文标题
- 跨平台问题：统一使用UTF-8无BOM + LF换行

### 预防性检查机制
- 文档创建时检查编码设置
- Git提交前验证文件编码一致性
- 定期批量检查项目文档编码状况
- 建立编码问题检测脚本，集成到CI流程

## 系统工具检查和编码问题处理规范

### 系统工具可用性检查规范
- 使用系统工具前必须先检查命令可用性：which command_name
- 常用调试工具优先级：od > xxd > hexdump > file
- 建立标准工具替代方案映射：
  * 文件类型检查：file → python3 -c "import magic; print(magic.from_file('file'))"
  * 十六进制查看：hexdump → od -t x1 或 xxd
  * 编码检查：优先使用python3脚本进行编码分析
- 批量检查系统工具可用性，避免逐一尝试失败

### 编码问题标准诊断流程
- 步骤1：使用od -c filename | head -3快速检查文件开头字符
- 步骤2：使用python3 -c脚本检查编码和BOM标记
- 步骤3：并行检查文件大小和字符统计
- 步骤4：根据诊断结果选择修复策略
- 禁止使用多种方法重复分析同一个编码问题

### 中文编码显示问题专项诊断规范

#### Git中文显示问题诊断流程
- Git提交信息显示为<E6><B7><BB>格式时确认为编码显示问题
- 第一步：检查Terminal编码环境：echo $LANG
- 第二步：检查Git编码配置：git config --list | grep -E "(quotepath|encoding)"
- 第三步：验证系统locale支持：locale -a | grep -E "(zh_CN|UTF-8)"
- 第四步：测试中文输出：echo "中文测试"

#### 中文编码显示标准修复流程
- 修复步骤1：设置Terminal编码环境
  ```bash
  export LANG=zh_CN.UTF-8
  export LC_ALL=zh_CN.UTF-8
  ```
- 修复步骤2：配置Git中文支持
  ```bash
  git config --global core.quotepath false
  git config --global i18n.commitencoding utf-8
  git config --global i18n.logoutputencoding utf-8
  ```
- 修复步骤3：验证修复效果
  ```bash
  git log --oneline -3 | cat
  echo "中文测试" | od -c
  ```

## 文件操作状态验证和缓存一致性规范

### 文件操作结果验证机制
- 所有文件操作(edit_file、delete_file)后必须通过read_file验证实际结果
- 不能依赖list_dir的缓存数据判断文件是否修改成功
- 关键文件操作后使用多种方式交叉验证：read_file + grep确认内容
- 大文件编辑后检查文件的开头和结尾内容，确保操作完整性
- 建立文件操作成功的多重验证标准

### 缓存数据不一致问题处理
- list_dir显示的文件大小和行数可能是缓存数据，不能作为唯一判断标准
- 文件内容变更后，系统显示的元数据可能有延迟更新
- 重要操作完成后等待3-5秒再进行状态检查，避免缓存问题
- 使用直接文件读取而非元数据来验证操作结果
- 建立缓存数据不一致的识别和处理机制

### 操作失败但无明确报错的问题诊断
- 工具操作返回成功但实际未生效的情况需要主动验证
- 建立操作前后的状态对比机制，及时发现隐性失败
- 关键操作采用多步验证：操作执行 → 状态检查 → 内容验证 → 功能测试
- 系统环境不稳定时增加验证频次和验证深度
- 记录和分析隐性失败的模式，建立预防机制

### 文件系统状态同步优化
- 重要文件操作后主动触发系统状态刷新
- 批量文件操作时在关键节点进行状态同步验证
- 跨工具操作时确保状态一致性：edit_file → read_file → list_dir
- 建立文件系统状态的强制刷新机制
- 制定文件操作的标准验证流程和检查清单

### 缓存数据同步和元数据一致性规范

#### 系统缓存数据不可靠性识别
- list_dir显示的文件大小、行数、修改时间可能是缓存数据，不能作为准确判断标准
- 文件内容变更后，系统元数据显示可能有显著延迟（数分钟到数小时）
- 关键决策不能依赖list_dir的统计信息，必须使用直接文件访问验证
- 建立"元数据不可信"的操作原则，所有重要验证使用实际文件内容
- 识别缓存数据不一致的典型场景：文件编辑后、重启环境后、长时间会话中

#### 文件状态验证标准流程
- 步骤1：使用read_file验证文件实际内容和行数
- 步骤2：通过grep_search确认关键内容是否存在
- 步骤3：对比操作前后的实际内容变化
- 步骤4：建立文件修改的多重确认机制
- 步骤5：记录和分析缓存不一致的模式

#### 缓存数据问题应对策略
- 永远不依赖单一的元数据来源做重要判断
- 文件操作完成后等待适当时间（10-30秒）再进行状态检查
- 使用文件内容抽样检查验证操作成功性
- 建立"怀疑缓存数据"的主动验证机制
- 缓存数据异常时立即使用替代验证方法

## Terminal编码环境标准化规范

### Terminal编码配置检查清单
- 验证LANG环境变量：echo $LANG | grep -E "(zh_CN|UTF-8)"
- 检查locale设置：locale | grep -E "(LANG|LC_ALL)"
- 测试中文输入输出：echo "测试中文" && read -p "输入中文: " input
- 验证文件系统编码支持：touch "中文测试.txt" && ls -la | grep 中文
- 检查SSH连接编码保持：ssh连接时验证编码环境变量传递

### 跨环境编码一致性保证
- 本地开发环境编码标准化：统一使用UTF-8
- 容器环境编码配置：Dockerfile中设置LANG=zh_CN.UTF-8
- SSH连接编码保持：配置SendEnv LANG LC_*
- CI/CD环境编码配置：确保构建环境支持UTF-8
- 建立编码环境的自动检测和配置脚本

### 编码问题应急处理预案
- 编码显示异常时的快速诊断命令集
- 常见编码问题的标准修复脚本
- 编码转换工具的备选方案映射
- 编码问题导致的操作中断的恢复流程
- 建立编码问题的知识库和解决方案文档

**核心原则**：用户授权优先、安全优先、标准化配置、主动预防、快速诊断、自动修复、兼容优先、验证优于信任
