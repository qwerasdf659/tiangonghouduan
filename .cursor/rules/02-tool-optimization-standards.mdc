---
description: 
globs: 
alwaysApply: true
---
# 工具调用优化规范
# 并行化处理、重复任务识别、效率优化等综合规范

## 工具调用和工作流程优化规范

### 文档修改工具选择策略
- **基于文件大小的工具选择强制规范**：
  * 文件 < 5KB：edit_file 或 search_replace 均可
  * 文件 5KB-15KB：优先使用search_replace，单次修改多处
  * 文件 15KB-50KB：强制使用search_replace，禁止edit_file
  * 文件 > 50KB：分段使用search_replace，每次修改不超过1KB范围
- **工具选择决策流程**：
  * 修改前必须先检查文件大小：ls -la filename
  * 根据文件大小自动选择工具，不允许主观判断
  * 大文件修改前先用grep_search精确定位修改位置
  * 批量修改时优先合并相邻修改点
- **中文文档修改特殊处理**：
  * 中文文档修改时特别注意编码和格式问题
  * 使用search_replace时确保中文字符完整性
  * 文档修改失败时立即切换工具，避免重复尝试
  * 长文档修改前先用grep_search定位目标位置

### 工作流程时机优化
- **标准化工作流程**：
  * 阶段1：项目分析和预扫描（并行执行）
  * 阶段2：核心功能实现（专注代码修改）
  * 阶段3：功能验证和测试（并行验证）
  * 阶段4：文档更新和同步（批量处理）
  * 阶段5：最终验证和清理（并行检查）
- **阶段间依赖管理**：
  * 代码修改阶段专注于功能实现，避免文档干扰
  * 所有功能实现完成后统一进行文档更新
  * 文档更新失败不应影响代码实现进度
  * 建立检查点机制，确保每个阶段完整性
- **任务完成清单管理**：
  * 任务开始时生成完整的任务清单
  * 实时更新任务完成状态，避免遗漏
  * 任务完成后进行完整性检查
  * 建立任务优先级和依赖关系图

### 工具调用效率优化
- **重复文件读取避免规范**：
  * 同一文件5分钟内不重复读取相同内容
  * 建立文件内容缓存，记录读取时间戳
  * 文件修改后立即失效相关缓存
  * 大文件分段读取时建立段落缓存
- **状态检查优化规范**：
  * 系统状态检查结果缓存10分钟
  * 避免重复的状态检查，使用缓存结果
  * 状态变更操作后立即失效相关缓存
  * 并行执行独立的状态检查操作
- **工具调用策略优化**：
  * 使用并行工具调用处理独立任务
  * 文件读取前先用file_search确认文件存在
  * 大文件修改前用grep_search预定位
  * 工具调用失败时立即分析原因，避免盲目重试
  * 建立工具调用的最佳实践模板

## 并行化处理和工作流程优化规范

### 强制并行化操作清单扩展版
- **项目分析阶段**：
  * 同时执行：list_dir项目根目录 + read_file package.json + grep_search技术栈特征
  * 同时执行：端口检查 + 进程检查 + 健康检查 + 数据库连接检查
  * 同时执行：环境变量检查 + 配置文件检查 + 依赖安装检查
- **文档更新阶段**：
  * 同时执行：多个独立文档的读取和分析
  * 同时执行：文档结构扫描 + 关键词定位 + 修改点识别
  * 同时执行：修改完成后的验证 + 格式检查 + 内容完整性检查
- **系统验证阶段**：
  * 同时执行：服务状态检查 + API端点测试 + 数据库查询测试
  * 同时执行：文件完整性验证 + 配置正确性验证 + 功能可用性验证

### 并行化执行监控和优化
- **并行化比例监控**：实时计算并行执行比例，目标>70%
- **并行化效果评估**：对比并行和串行执行的时间差异
- **并行化瓶颈识别**：识别阻碍并行化的依赖关系和资源限制
- **并行化策略优化**：基于执行结果优化并行化策略

### 任务依赖关系分析和管理
- **真依赖识别**：区分真正的依赖关系和假依赖关系
- **依赖链优化**：优化任务依赖链，减少串行等待时间
- **依赖关系缓存**：缓存任务依赖关系分析结果
- **依赖关系可视化**：提供任务依赖关系的可视化展示

### 任务分解和优先级规范
- **任务依赖关系分析**：
  * 识别真正的依赖关系，区分必须依赖和建议依赖
  * 并行执行所有无依赖关系的任务
  * 建立任务执行的关键路径，优先处理关键路径任务
- **任务优先级排序**：
  * P0（阻塞性）：环境检查、项目结构分析、关键配置验证
  * P1（高优先级）：代码修改、功能实现、核心问题修复
  * P2（中优先级）：文档更新、配置优化、非关键功能
  * P3（低优先级）：清理临时文件、优化建议、补充说明
- **任务执行策略**：
  * 优先完成P0任务，为后续任务创建基础
  * 并行执行同优先级的独立任务
  * 低优先级任务不能阻塞高优先级任务的执行

## 重复任务识别和智能避免规范

### 重复任务检测算法升级
- **任务指纹算法**：基于关键词、操作类型、目标文件生成任务指纹
- **相似度计算**：计算任务间的相似度，>85%视为重复任务
- **时间窗口检测**：在30分钟时间窗口内检测重复任务
- **上下文分析**：结合会话上下文判断任务是否真正重复

### 智能任务去重机制
- **任务合并策略**：将相似任务合并为单一任务执行
- **增量任务识别**：识别在原任务基础上的增量需求
- **任务状态查询**：提供任务完成状态的快速查询机制
- **用户确认机制**：重复任务检测后主动询问用户意图

### 重复任务检测机制
- **任务指纹识别**：
  * 对用户请求进行关键词提取和模式匹配
  * 识别完全相同或高度相似的任务请求
  * 建立任务唯一标识符（基于请求内容、时间、上下文）
  * 检测重复任务的时间间隔和相似度
- **已完成任务记录**：
  * 记录每个任务的完成状态和时间戳
  * 保存任务的关键输出和结果摘要
  * 建立任务完成的验证标准
  * 维护任务历史记录和状态追踪
- **重复任务处理策略**：
  * 发现重复任务时立即提醒用户
  * 提供之前任务的完成状态和结果摘要
  * 询问用户是否需要重新执行或补充执行
  * 避免盲目重复执行相同的操作

### 任务完成状态管理系统
- **状态标准化**：统一任务完成状态的标记和描述格式
- **状态持久化**：任务完成状态在会话间保持持久化
- **状态查询接口**：提供任务状态的快速查询和展示
- **状态同步机制**：确保任务状态在不同组件间同步

## 工具调用效率优化专项规范

### 严禁重复工具调用
- **同一会话中避免对相同内容进行重复的状态检查、文件读取、命令执行**
- **关键系统状态检查结果应缓存使用，避免在同一会话中重复验证**
- **工具调用前评估必要性，确保不是重复或冗余操作**
- **限制验证频率**：同类验证操作在单个会话中不超过2次，除非确实需要验证变更结果

### 状态检查去重机制
- **建立检查清单**：会话开始时建立已完成检查项目清单，避免重复验证
- **状态变更触发**：仅在相关操作完成后重新检查状态，而非每次操作前都检查
- **集中状态验证**：将多个相关状态检查集中在一次工具调用中完成
- **避免冗余确认**：对已确认正常的服务状态，除非有错误发生否则不重复检查

### 工具调用效率监控
- **效率指标跟踪**：跟踪工具调用成功率、重复率、并行化率等关键指标
- **失败分析机制**：工具调用失败时立即分析原因，制定针对性的替代方案
- **时间效率要求**：单次工具调用操作时间不超过30秒，长操作必须分段或后台执行
- **请求次数预算**：为每类任务设定合理的工具调用次数预算，超出时进行优化

### 智能重试策略规范
- **重试逻辑优化**：工具调用失败时分析失败原因，避免盲目重试浪费请求次数
- **重试次数限制**：同类操作重试不超过2次，不同方法重试不超过3次
- **替代方案机制**：重试失败时立即切换到替代方案，而非无限重试
- **错误类型分类**：根据错误类型选择重试策略或直接切换方案

### 故障转移机制
- **工具切换策略**：主工具失败时立即切换到备用工具（如file_search → grep_search）
- **方法降级策略**：复杂操作失败时降级到简单操作（如并行 → 串行）
- **用户提示机制**：无法自动恢复时及时提示用户介入

## 验证策略优化规范

### 验证结果缓存机制
- **缓存策略**：相同的验证操作5分钟内不重复执行
- **缓存管理**：验证结果记录时间戳和有效期
- **缓存失效**：关键状态变更后立即失效相关验证缓存
- **缓存优化**：建立智能缓存机制，提高验证效率

### 验证批量化处理
- **批量验证**：将多个验证操作合并为批量验证
- **并行验证**：使用并行工具调用同时执行多个验证
- **验证优化**：验证失败时提供详细的失败原因和修复建议
- **验证策略**：根据验证重要性和频率优化验证策略

### 验证优先级和频率
- **关键系统状态**：每次重要操作后验证
- **配置正确性**：配置修改后验证
- **功能可用性**：功能修改后验证
- **文档准确性**：文档修改后抽样验证

## 会话效率提升量化目标

### 短期目标 (1-2周内实现)
- **工具调用成功率**：从当前85%提升到95%
- **并行化比例**：从当前30%提升到70%
- **重复任务识别率**：从当前60%提升到90%
- **任务完成时间**：平均减少30-50%

### 中期目标 (1-2个月内实现)
- **会话中断率**：从当前15%降低到5%
- **用户满意度**：从当前80%提升到90%
- **问题解决效率**：平均解决时间减少50%
- **规则覆盖率**：问题规则覆盖率达到95%

### 长期目标 (持续改进)
- **智能化程度**：实现70%的问题自动预防
- **用户体验**：实现95%的用户满意度
- **系统稳定性**：实现99%的会话成功率
- **效率提升**：整体效率提升100%

## 实施检查清单

### 每次会话开始前
- [ ] 明确会话目标和所需信息
- [ ] 分析哪些操作可以并行执行
- [ ] 建立已完成检查项目清单
- [ ] 设定工具调用次数预算

### 每次工具调用前
- [ ] 检查是否为重复调用
- [ ] 评估是否可以并行执行
- [ ] 确认调用的必要性
- [ ] 预估调用时间和成本

### 每次会话结束后
- [ ] 统计工具调用次数和效率
- [ ] 分析是否存在重复或冗余调用
- [ ] 识别可以并行化的操作
- [ ] 记录优化建议和改进点

**核心原则**：并行优先、缓存复用、批量处理、验证优化、质量监控、持续改进、效率优先、避免重复、成本控制

## 基于实际会话问题的优化规范

### 重复状态检查防止机制（基于实际案例分析）
- **状态检查去重算法**：建立已检查状态的缓存机制，同一状态在5分钟内不重复检查
- **检查历史记录**：维护会话级的检查历史，避免重复验证相同的系统状态
- **状态变更触发机制**：只有在相关操作完成后才重新检查状态，而非每次操作前都检查
- **批量状态验证**：将相关状态检查合并为一次工具调用，避免分散检查

### 工具调用次数控制强化规范
- **严格预算控制**：单次会话工具调用次数不得超过20次，超过时必须优化策略
- **工具调用效率监控**：实时监控工具调用成功率和重复率，重复率超过20%时立即优化
- **强制并行化比例**：独立操作的并行化比例必须达到80%以上
- **工具调用成本分析**：为每类任务设定工具调用成本预算，超预算时立即调整策略

### 文件读取和配置检查优化
- **文件读取缓存机制**：同一文件在会话期间只读取一次，后续使用缓存内容
- **配置检查批量化**：将多个配置文件的检查合并为一次并行操作
- **智能文件选择**：基于任务类型智能选择需要读取的文件，避免无关文件读取
- **文件修改检测**：只有在文件被修改后才重新读取，避免重复读取相同内容

### 问题诊断流程标准化（基于实际案例）
- **5分钟快速诊断法**：问题诊断必须在5分钟内完成，超时立即切换到标准解决方案
- **问题分类优先级**：A类配置问题（1-2分钟）、B类服务问题（3-5分钟）、C类代码问题（5-10分钟）
- **症状vs根因区分**：明确区分问题症状和根本原因，避免治标不治本
- **诊断决策树**：建立标准化的问题诊断决策树，避免诊断方向错误

### 会话效率量化指标（基于实际数据）
- **工具调用次数目标**：从当前60+次降低到20次以内
- **重复检查率目标**：从当前30-40%降低到10%以内  
- **并行化比例目标**：从当前30%提升到80%以上
- **问题解决时间目标**：简单问题5分钟内解决，复杂问题15分钟内解决

**核心原则**：效率优先、避免重复、并行最大化、量化监控、持续优化
