---
description: 
globs: 
alwaysApply: true
---
# 核心开发规范
# 数据库管理、Node.js应用开发、测试数据等基础规范

## 数据库表结构和索引管理规范
- 禁止在生产环境频繁使用sequelize.sync({ alter: true })或force: true，表结构变更必须通过手动SQL脚本或迁移工具完成
- 每张表的索引总数不得超过MySQL的64个限制，如需新增索引，必须先评估和清理无用索引
- 初始化脚本必须加超时和详细日志，如遇长时间无响应，需立即排查数据库连接和表结构问题
- 大批量数据插入必须分批处理，每批不超过100条，避免单次SQL阻塞
- 所有表结构和索引变更需在代码评审时重点检查，防止上线后阻塞数据库

### 数据库长时间初始化处理
- 当数据库初始化脚本运行超过2分钟时，应该先检查数据库状态和表结构，验证数据是否已成功初始化
- 使用timeout命令限制脚本运行时间：`timeout 120s node scripts/init-database.js`
- 避免在生产环境使用force模式重建数据库
- 优先使用ALTER TABLE而不是DROP TABLE处理表结构变更

### 数据库迁移规范
- 所有表结构变更必须通过迁移脚本完成，禁止直接修改数据库
- 迁移脚本必须包含up和down操作，支持回滚
- 重要迁移操作前必须备份数据库
- 迁移脚本执行前必须在测试环境验证
- 迁移操作必须在维护窗口期间执行，避免影响正常业务

## 测试数据一致性规范

### 统一测试数据管理
- 所有测试用户数据必须定义在统一的配置文件中（如 config/test-data.js）
- 禁止在多个文件中硬编码相同的测试数据
- 初始化脚本和测试脚本必须引用同一个数据源
- 只保留一个主要的初始化脚本，其他过时脚本必须删除或明确标记

### 强制数据存在性检查
- 测试脚本必须包含数据存在性检查，避免空指针异常
- 所有数据库操作前必须验证依赖数据是否存在
- 所有数据库查询必须检查返回结果是否为null/undefined
- 使用 try-catch 包装可能失败的操作
- 提供有意义的错误消息，便于快速定位问题

### 测试数据处理示例代码
```javascript
// ✅ 正确模式 - 统一配置 + 错误检查  
const TEST_CONFIG = require('./config/test-data.js');
const testUser = await User.findOne({ where: { mobile: TEST_CONFIG.TEST_USER_MOBILE } });
if (!testUser) {
  console.error(`测试用户不存在: ${TEST_CONFIG.TEST_USER_MOBILE}`);
  console.log('请运行: node scripts/init-database.js');
  process.exit(1);
}
const { accessToken } = generateTokens(testUser);
```

## Node.js应用开发规范

### 内存管理规范
- 开发环境必须设置合理的内存限制，避免内存使用率超过80%
- 使用 NODE_OPTIONS="--max-old-space-size=512" 控制堆内存大小
- PM2配置中设置 max_memory_restart 低于实际内存限制
- 实施内存监控告警，超过75%时自动重启进程
- 避免在开发环境使用集群模式，优先使用fork模式

### API路径规范
- 健康检查端点必须同时提供 /health 和 /api/health 两个路径
- 所有API端点必须有对应的错误处理机制
- API路径变更时必须同步更新文档和测试用例
- 实施API版本控制和向后兼容策略

### 服务监控规范
- 所有服务组件必须实现 isHealthy() 方法
- WebSocket等实时服务需要实现连接计数和状态检查
- 健康检查端点必须返回详细的服务状态信息
- 实施服务依赖检查和故障隔离机制

### 进程管理规范
- 开发环境使用单进程模式，生产环境可使用集群模式
- 配置合理的进程重启策略和超时时间
- 实施优雅关闭机制，确保数据一致性
- 配置日志轮转和存储策略

### 错误处理规范
- 所有异步操作必须有错误处理
- 实施全局错误捕获和处理机制
- 错误信息必须包含上下文和解决建议
- 建立错误分类和优先级体系

## 命令执行和环境检查规范

### 环境依赖完整性检查
- 在开始任何开发任务前必须执行环境检查
- 检查Node.js版本和PM2安装状态
- 验证package.json中的依赖是否已安装
- 确认数据库连接配置的正确性
- 验证环境变量文件的完整性

### 应用启动状态验证
- 应用启动后必须进行完整的健康检查
- 检查端口监听状态：netstat -tlnp | grep :PORT
- 验证健康检查端点：curl -f http://localhost:PORT/api/health
- 确认PM2进程状态：pm2 status
- 检查应用日志：pm2 logs --lines 20

### 命令执行标准化
- 所有长时间运行的命令必须设置超时和限制参数
- 使用timeout命令限制执行时间：timeout 120s command
- 日志查看命令必须限制行数：--lines N
- 网络请求必须设置超时：curl -m 30
- 大文件操作需要进度显示和分段处理

## 端口占用和进程管理规范

### 端口占用检查和处理
- 启动Node.js应用前必须检查端口占用状态：netstat -tlnp | grep :PORT
- 发现端口被占用时必须先终止占用进程：pkill -f "node.*app.js"
- 应用重启必须等待前一进程完全终止（至少2秒间隔）
- 使用PM2等进程管理工具时要检查进程状态：pm2 status
- 开发环境建议使用nodemon等热重载工具减少重启频率

### 应用开发和调试规范
- 代码修改后重启应用前必须检查当前运行状态
- 使用curl -f http://localhost:PORT/health验证应用健康状态
- 重启失败时立即分析错误原因，不要盲目重试
- 开发环境配置文件监听和自动重启机制
- 关键修改后必须验证核心功能正常运行

### 错误处理和恢复机制规范
- 每个关键操作必须有自动化的错误恢复流程
- 端口占用错误：自动终止占用进程 → 等待2秒 → 重新启动
- 应用启动失败：检查配置文件 → 检查依赖 → 检查端口 → 重试
- 数据库连接失败：检查服务状态 → 检查配置 → 重试连接
- 错误恢复失败时提供详细的诊断信息和手动解决方案

## 资源使用监控规范

### 系统资源监控
- 定期检查系统资源使用情况（内存、CPU、磁盘）
- 监控Node.js进程的内存使用，避免内存泄漏
- 检查数据库连接池状态，避免连接泄漏
- 监控端口使用情况，及时清理僵尸进程
- 设置资源使用告警阈值

### WebSocket服务监控
- WebSocket服务必须实现完整的健康检查
- 实现isHealthy()方法检查连接状态
- 监控活跃连接数和连接质量
- 提供连接重连机制和故障转移
- 记录详细的连接和断开日志

### 开发环境一致性
- 开发环境配置必须标准化
- 所有开发者使用相同的Node.js版本
- 统一的依赖管理和版本锁定
- 标准化的启动和停止脚本
- 一致的环境变量配置模板

## 部署配置规范

### 环境配置管理
- 环境配置必须区分开发、测试、生产环境
- 敏感信息必须通过环境变量管理
- 实施配置验证和兼容性检查
- 建立配置变更追踪机制

### 部署流程标准化
- 建立自动化的持续集成/持续部署流程
- 部署前进行完整的回归测试
- 配置蓝绿部署或滚动发布策略
- 建立快速回滚机制

### 监控和告警体系
- 实施全方位的应用性能监控
- 配置关键指标的告警机制
- 建立日志聚合和分析系统
- 实施健康检查和故障自愈机制

## 抽奖业务逻辑规范

### 批量抽奖积分扣除规范
- **统一扣费时机**：批量抽奖（如5连抽、10连抽）必须在开始前一次性扣除所有积分，禁止循环中重复扣除
- **事务完整性**：整个批量抽奖过程必须在单个数据库事务中完成，确保数据一致性
- **积分计算公式**：totalCost = actualCount * costPoints，必须正确计算总消费
- **积分不足检查**：扣除积分前必须检查用户积分是否足够，不足时立即返回错误
- **扣费记录完整**：每次积分扣除都必须记录到PointsRecord表，包含描述、来源、余额等信息

### 抽奖类型参数映射规范
- **参数兼容性**：后端必须支持前端常用的抽奖类型参数映射：
  * 'single': 1次
  * 'triple': 3次
  * 'quintuple': 5次, 'five': 5次
  * 'decade': 10次, 'ten': 10次
- **参数验证**：对不支持的抽奖类型返回明确错误信息
- **默认值处理**：未指定抽奖类型时默认为'single'单次抽奖
- **向后兼容**：新增抽奖类型时必须保持对现有类型的支持

### 抽奖结果数据规范
- **序号字段完整性**：每个抽奖结果必须包含draw_sequence字段，从1开始递增
- **用户信息路径**：确保user_info.remaining_points等字段路径正确，避免undefined
- **响应格式一致性**：保持与前端约定的响应格式，包含所有必要字段
- **保底机制准确性**：正确实现和返回保底触发状态和剩余次数

### 每日限制配置规范
- **默认值一致性**：确保代码中所有地方的每日限制默认值保持一致
- **环境变量优先级**：明确DAILY_LOTTERY_LIMIT环境变量优先于代码默认值
- **配置验证**：启动时验证限制配置的合理性（通常50次/天）
- **限制范围检查**：基于用户ID进行每日限制，不是全局限制
- **时区处理**：正确处理每日重置的时间边界，考虑服务器时区设置

## WebSocket服务配置和管理规范

### WebSocket服务初始化配置规范
- **路径配置标准化**：WebSocket服务必须配置明确的路径：path: '/ws'
- **跨域配置**：正确配置CORS，支持小程序和Web端访问
- **连接认证**：实现Token验证机制确保连接安全性
- **心跳机制**：配置合理的心跳间隔维持连接稳定性
- **连接数限制**：设置合理的并发连接数限制

### WebSocket域名配置管理
- **小程序域名要求**：微信小程序socket合法域名必须配置为：wss://domain.com
- **协议要求**：生产环境强制使用wss://加密连接，开发环境支持ws://
- **路径一致性**：确保前后端WebSocket路径配置一致
- **域名变更管理**：域名变更时同步更新前端配置和文档
- **SSL证书管理**：确保wss://连接的SSL证书有效

### WebSocket服务重启和恢复
- **优雅重启**：服务重启前正确关闭现有WebSocket连接
- **配置热加载**：支持WebSocket配置的热加载，减少重启需求
- **连接状态管理**：维护连接状态，支持断线重连
- **消息队列处理**：处理重启期间的消息队列和数据恢复
- **监控告警**：WebSocket服务异常时及时告警和处理

**核心原则**：数据安全优先、性能兼顾、可维护性保证、测试覆盖完整、稳定性优先、监控全面

### 配置管理和文档一致性规范

#### 统一配置管理强制要求
- **禁止硬编码域名配置**：所有域名配置必须通过环境变量管理，禁止在代码中硬编码domain.com、localhost等地址
- **配置验证机制**：启动时必须验证所有关键配置项，包括域名、端口、数据库连接等
- **环境配置分离**：严格区分开发、测试、生产环境配置，避免配置混合使用
- **配置文件集中管理**：建立统一的配置管理文件，避免配置分散在多个文件中

#### 文档域名配置一致性检查
- **部署后文档同步更新**：任何域名变更后必须同步更新所有相关文档
- **占位符域名检测**：建立自动检测机制，发现并修复文档中的占位符域名（domain.com、your-domain.com等）
- **WebSocket地址一致性**：确保所有文档中的WebSocket连接地址与实际部署保持一致
- **API端点配置统一**：所有接口文档中的API端点必须与后端实际路由保持一致

#### 配置错误预防机制
- **配置模板标准化**：建立标准化的配置模板，避免手动输入错误
- **配置检查清单**：部署前必须执行配置检查清单，验证所有配置项正确性
- **配置变更影响评估**：配置变更前必须评估对前端、文档、接口的影响范围
- **配置回滚机制**：重要配置变更必须有回滚方案和验证流程

**核心原则**：配置统一管理、文档实时同步、自动化检测、预防优于修复
