/**
 * Áî®Êà∑Ë∑ØÁî± - User Routes
 * üî¥ ÂâçÁ´ØÂØπÊé•Ë¶ÅÁÇπÔºö
 * - Áî®Êà∑‰ø°ÊÅØËé∑ÂèñÂíåÊõ¥Êñ∞
 * - ÁßØÂàÜËÆ∞ÂΩïÊü•ËØ¢ÂíåÂàÜÈ°µ
 * - Áî®Êà∑ÁªüËÆ°Êï∞ÊçÆ
 */

const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const { User, PointsRecord } = require('../models');

// üî¥ Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
// GET /api/user/info
router.get('/info', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.user_id;
    
    const user = await User.findByPk(userId);
    if (!user) {
      return res.json({
        code: 1001,
        msg: 'Áî®Êà∑‰∏çÂ≠òÂú®',
        data: null
      });
    }
    
    res.json({
      code: 0,
      msg: 'success',
      data: user.getSafeUserInfo()
    });
  } catch (error) {
    console.error('Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error);
    res.json({
      code: 1000,
      msg: 'Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•',
      data: null
    });
  }
});

// üî¥ Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØ
// PUT /api/user/info
router.put('/info', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.user_id;
    const { nickname, avatar } = req.body;
    
    const user = await User.findByPk(userId);
    if (!user) {
      return res.json({
        code: 1001,
        msg: 'Áî®Êà∑‰∏çÂ≠òÂú®',
        data: null
      });
    }
    
    // Êõ¥Êñ∞ÂÖÅËÆ∏‰øÆÊîπÁöÑÂ≠óÊÆµ
    const updateData = {};
    if (nickname) updateData.nickname = nickname;
    if (avatar) updateData.avatar = avatar;
    
    await user.update(updateData);
    
    res.json({
      code: 0,
      msg: 'success',
      data: user.getSafeUserInfo()
    });
  } catch (error) {
    console.error('Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error);
    res.json({
      code: 1000,
      msg: 'Êõ¥Êñ∞Áî®Êà∑‰ø°ÊÅØÂ§±Ë¥•',
      data: null
    });
  }
});

// üî¥ Ëé∑ÂèñÁßØÂàÜËÆ∞ÂΩïÔºàÊîØÊåÅÂàÜÈ°µÂíåÁ≠õÈÄâÔºâ
// GET /api/user/points/records
router.get('/points/records', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.user_id;
    const {
      type,  // 'earn' | 'spend' | 'all'
      source,  // 'photo_upload' | 'lottery' | 'exchange' Á≠â
      page = 1,
      limit = 20
    } = req.query;
    
    const result = await PointsRecord.getUserRecords(userId, {
      type,
      source,
      page: parseInt(page),
      limit: parseInt(limit)
    });
    
    res.json({
      code: 0,
      msg: 'success',
      data: result
    });
  } catch (error) {
    console.error('Ëé∑ÂèñÁßØÂàÜËÆ∞ÂΩïÂ§±Ë¥•:', error);
    res.json({
      code: 1000,
      msg: 'Ëé∑ÂèñÁßØÂàÜËÆ∞ÂΩïÂ§±Ë¥•',
      data: null
    });
  }
});

// üî¥ Ëé∑ÂèñÁßØÂàÜÁªüËÆ°
// GET /api/user/points/statistics
router.get('/points/statistics', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.user_id;
    
    // Ëé∑ÂèñÁî®Êà∑ÂΩìÂâçÁßØÂàÜ
    const user = await User.findByPk(userId);
    if (!user) {
      return res.json({
        code: 1001,
        msg: 'Áî®Êà∑‰∏çÂ≠òÂú®',
        data: null
      });
    }
    
    // ÁªüËÆ°ÁßØÂàÜÊî∂ÂÖ•ÂíåÊîØÂá∫
    const earnRecords = await PointsRecord.findAll({
      where: { user_id: userId, type: 'earn' },
      attributes: ['points', 'source']
    });
    
    const spendRecords = await PointsRecord.findAll({
      where: { user_id: userId, type: 'spend' },
      attributes: ['points', 'source']
    });
    
    // ËÆ°ÁÆóÊÄªÊî∂ÂÖ•ÂíåÊîØÂá∫
    const totalEarned = earnRecords.reduce((sum, record) => sum + record.points, 0);
    const totalSpent = Math.abs(spendRecords.reduce((sum, record) => sum + record.points, 0));
    
    // ÊåâÊù•Ê∫êÁªüËÆ°
    const earnBySource = {};
    const spendBySource = {};
    
    earnRecords.forEach(record => {
      earnBySource[record.source] = (earnBySource[record.source] || 0) + record.points;
    });
    
    spendRecords.forEach(record => {
      spendBySource[record.source] = (spendBySource[record.source] || 0) + Math.abs(record.points);
    });
    
    res.json({
      code: 0,
      msg: 'success',
      data: {
        current_points: user.total_points,
        total_earned: totalEarned,
        total_spent: totalSpent,
        earn_by_source: earnBySource,
        spend_by_source: spendBySource,
        records_count: {
          earn: earnRecords.length,
          spend: spendRecords.length,
          total: earnRecords.length + spendRecords.length
        }
      }
    });
  } catch (error) {
    console.error('Ëé∑ÂèñÁßØÂàÜÁªüËÆ°Â§±Ë¥•:', error);
    res.json({
      code: 1000,
      msg: 'Ëé∑ÂèñÁßØÂàÜÁªüËÆ°Â§±Ë¥•',
      data: null
    });
  }
});

// üî¥ Ëé∑ÂèñÁî®Êà∑ÁªüËÆ°‰ø°ÊÅØÔºà‰∏∫ÂâçÁ´ØÂÖºÂÆπÊÄßÊ∑ªÂä†Ôºâ
// GET /api/user/statistics
router.get('/statistics', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.user_id;
    
    // Ëé∑ÂèñÁî®Êà∑Âü∫Êú¨‰ø°ÊÅØ
    const user = await User.findByPk(userId);
    if (!user) {
      return res.json({
        code: 1001,
        msg: 'Áî®Êà∑‰∏çÂ≠òÂú®',
        data: null
      });
    }
    
    // ÁªüËÆ°ÁßØÂàÜÊî∂ÂÖ•ÂíåÊîØÂá∫
    const earnRecords = await PointsRecord.findAll({
      where: { user_id: userId, type: 'earn' },
      attributes: ['points', 'source']
    });
    
    const spendRecords = await PointsRecord.findAll({
      where: { user_id: userId, type: 'spend' },
      attributes: ['points', 'source']
    });
    
    // ËÆ°ÁÆóÊÄªÊî∂ÂÖ•ÂíåÊîØÂá∫
    const totalEarned = earnRecords.reduce((sum, record) => sum + record.points, 0);
    const totalSpent = Math.abs(spendRecords.reduce((sum, record) => sum + record.points, 0));
    
    // ÊåâÊù•Ê∫êÁªüËÆ°
    const earnBySource = {};
    const spendBySource = {};
    
    earnRecords.forEach(record => {
      earnBySource[record.source] = (earnBySource[record.source] || 0) + record.points;
    });
    
    spendRecords.forEach(record => {
      spendBySource[record.source] = (spendBySource[record.source] || 0) + Math.abs(record.points);
    });
    
    // ËÆ°ÁÆóÁî®Êà∑Ê¥ªË∑ÉÂ§©Êï∞
    const registrationDays = Math.floor((new Date() - new Date(user.created_at)) / (1000 * 60 * 60 * 24));
    
    // ÁªüËÆ°‰ªäÊó•Ê¥ªÂä®
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const todayRecords = await PointsRecord.count({
      where: {
        user_id: userId,
        created_at: {
          [require('sequelize').Op.gte]: today
        }
      }
    });
    
    res.json({
      code: 0,
      msg: 'success',
      data: {
        // Áî®Êà∑Âü∫Êú¨‰ø°ÊÅØ
        user_info: {
          user_id: user.user_id,
          nickname: user.nickname,
          avatar: user.avatar,
          status: user.status,
          // is_merchantÂ≠óÊÆµÂ∑≤ÁßªÈô§ÔºåÊùÉÈôêÁÆÄÂåñ‰∏∫Áî®Êà∑/ÁÆ°ÁêÜÂëò
          registration_days: registrationDays,
          last_login: user.last_login
        },
        // ÁßØÂàÜÁªüËÆ°
        points_statistics: {
          current_points: user.total_points,
          total_earned: totalEarned,
          total_spent: totalSpent,
          earn_by_source: earnBySource,
          spend_by_source: spendBySource
        },
        // Ê¥ªÂä®ÁªüËÆ°
        activity_statistics: {
          today_activities: todayRecords,
          total_records: earnRecords.length + spendRecords.length,
          earn_records_count: earnRecords.length,
          spend_records_count: spendRecords.length
        }
      }
    });
  } catch (error) {
    console.error('Ëé∑ÂèñÁî®Êà∑ÁªüËÆ°Â§±Ë¥•:', error);
    res.json({
      code: 1000,
      msg: 'Ëé∑ÂèñÁî®Êà∑ÁªüËÆ°Â§±Ë¥•',
      data: null
    });
  }
});

// üî¥ Ê£ÄÊü•Áî®Êà∑Áä∂ÊÄÅ
// GET /api/user/status
router.get('/status', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.user_id;
    
    const user = await User.findByPk(userId);
    if (!user) {
      return res.json({
        code: 1001,
        msg: 'Áî®Êà∑‰∏çÂ≠òÂú®',
        data: null
      });
    }
    
    // Ê£ÄÊü•Áî®Êà∑‰ªäÊó•Ê¥ªÂä®
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const todayRecords = await PointsRecord.count({
      where: {
        user_id: userId,
        created_at: {
          [require('sequelize').Op.gte]: today
        }
      }
    });
    
    res.json({
      code: 0,
      msg: 'success',
      data: {
        user_id: user.user_id,
        status: user.status,
        // is_merchantÂ≠óÊÆµÂ∑≤ÁßªÈô§ÔºåÊùÉÈôêÁÆÄÂåñ‰∏∫Áî®Êà∑/ÁÆ°ÁêÜÂëò
        total_points: user.total_points,
        today_activities: todayRecords,
        registration_days: Math.floor((new Date() - new Date(user.created_at)) / (1000 * 60 * 60 * 24)),
        last_login: user.last_login
      }
    });
  } catch (error) {
    console.error('Ëé∑ÂèñÁî®Êà∑Áä∂ÊÄÅÂ§±Ë¥•:', error);
    res.json({
      code: 1000,
      msg: 'Ëé∑ÂèñÁî®Êà∑Áä∂ÊÄÅÂ§±Ë¥•',
      data: null
    });
  }
});

// üî¥ Êñ∞Â¢ûÊé•Âè£ÔºöËé∑ÂèñÁî®Êà∑‰ªäÊó•ÁßØÂàÜË∂ãÂäø
// GET /api/user/points/today-trend
// ÂâçÁ´ØÈúÄÊ±ÇÔºöÁî®Êà∑‰ªäÊó•Ëé∑ÂæóÁßØÂàÜÂíåÊ∂àË¥πÁßØÂàÜÁªüËÆ°
router.get('/points/today-trend', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.user_id;
    const { Op } = require('sequelize');
    
    // Ëé∑Âèñ‰ªäÊó•ÂºÄÂßãÊó∂Èó¥Ôºà00:00:00Ôºâ
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Ëé∑ÂèñÊòéÊó•ÂºÄÂßãÊó∂Èó¥Ôºà23:59:59Ôºâ
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // Êü•ËØ¢‰ªäÊó•ÊâÄÊúâÁßØÂàÜËÆ∞ÂΩï
    const todayRecords = await PointsRecord.findAll({
      where: {
        user_id: userId,
        created_at: {
          [Op.gte]: today,
          [Op.lt]: tomorrow
        }
      },
      order: [['created_at', 'ASC']]
    });
    
    // ÁªüËÆ°‰ªäÊó•Ëé∑ÂæóÁßØÂàÜÔºàearnÁ±ªÂûãÁöÑËÆ∞ÂΩïÔºâ
    let todayEarned = 0;
    // ÁªüËÆ°‰ªäÊó•Ê∂àË¥πÁßØÂàÜÔºàspendÁ±ªÂûãÁöÑËÆ∞ÂΩïÔºâ
    let todayConsumed = 0;
    
    todayRecords.forEach(record => {
      if (record.type === 'earn') {
        todayEarned += Math.abs(record.points); // Á°Æ‰øù‰∏∫Ê≠£Êï∞
      } else if (record.type === 'spend') {
        todayConsumed += Math.abs(record.points); // Á°Æ‰øù‰∏∫Ê≠£Êï∞
      }
    });
    
    // Ëé∑ÂèñÊúÄÂêéÊõ¥Êñ∞Êó∂Èó¥
    const lastRecord = todayRecords[todayRecords.length - 1];
    const lastUpdateTime = lastRecord ? lastRecord.created_at : today;
    
    res.json({
      code: 0,
      msg: 'success',
      data: {
        today_earned: todayEarned,      // ‰ªäÊó•Ëé∑ÂæóÁßØÂàÜ
        today_consumed: todayConsumed,  // ‰ªäÊó•Ê∂àË¥πÁßØÂàÜ
        last_update: lastUpdateTime.toISOString().slice(0, 19).replace('T', ' '), // Ê†ºÂºèÂåñÊó∂Èó¥
        query_date: today.toISOString().slice(0, 10), // Êü•ËØ¢Êó•Êúü YYYY-MM-DD
        total_records: todayRecords.length // ‰ªäÊó•ÁßØÂàÜËÆ∞ÂΩïÊï∞Èáè
      }
    });
    
  } catch (error) {
    console.error('Ëé∑Âèñ‰ªäÊó•ÁßØÂàÜË∂ãÂäøÂ§±Ë¥•:', error);
    res.json({
      code: 1000,
      msg: 'Ëé∑Âèñ‰ªäÊó•ÁßØÂàÜË∂ãÂäøÂ§±Ë¥•',
      data: null
    });
  }
});

module.exports = router; 