/**
 * ÈáçÊûÑ‰∏∫‰ΩøÁî®V4Áªü‰∏ÄÂ∑•ÂÖ∑Á±ª
 * ÈáçÊûÑÊó∂Èó¥Ôºö2025-09-15T22:33:05.564+08:00
 */

const { getDatabaseHelper } = require('../utils/UnifiedDatabaseHelper')
const { Sequelize } = require('sequelize')

// Ëé∑ÂèñÁªü‰∏ÄÊï∞ÊçÆÂ∫ìÂä©Êâã
const db = getDatabaseHelper()

/**
 * ‰∏ª‰ΩìÂäüËÉΩÂ•ñÂìÅÈÖçÁΩÆÊõ¥Êñ∞ËÑöÊú¨
 *
 * ÂäüËÉΩÔºöÂ∞ÜÂ•ñÂìÅÈÖçÁΩÆË∞ÉÊï¥‰∏∫Á¨¶Âêà‰∏ª‰ΩìÂäüËÉΩÈúÄÊ±ÇÔºö
 * - ÂÖ´ÂÖ´ÊäòÔºö‰∏≠Â•ñÁéá0%
 * - 100ÁßØÂàÜÔºö‰∏≠Â•ñÁéá30%
 * - ÁîúÂìÅ1‰ªΩÔºö‰∏≠Â•ñÁéá20%
 * - ÈùíËèú1‰ªΩÔºö‰∏≠Â•ñÁéá30%
 * - 2000ÁßØÂàÜÂà∏Ôºö‰∏≠Â•ñÁéá1%
 * - 500ÁßØÂàÜÂà∏Ôºö‰∏≠Â•ñÁéá18%
 * - Á≤æÂìÅÈ¶ñÈ•∞‰∏Ä‰∏™Ôºö‰∏≠Â•ñÁéá1%
 * - ÁîüËÖåÊãºÁõò158Ôºö‰∏≠Â•ñÁéá0%
 *
 * @version 4.0.0
 * @date 2025-09-13
 */

// Êï∞ÊçÆÂ∫ìËøûÊé•

// ‰∏ª‰ΩìÂäüËÉΩÈúÄÊ±ÇÁöÑÂ•ñÂìÅÈÖçÁΩÆÔºà1-10Âè∑Â•ñÂìÅÔºâ
const MAIN_FEATURE_PRIZES = [
  {
    prize_id: 1,
    prize_name: 'ÂÖ´ÂÖ´Êäò',
    prize_type: 'coupon',
    prize_value: 88.0,
    win_probability: 0.0, // 0%‰∏≠Â•ñÁéá
    angle: 0,
    color: '#FF6B35',
    sort_order: 1,
    stock_quantity: 1000,
    cost_points: 100,
    status: 'active'
  },
  {
    prize_id: 2,
    prize_name: '100ÁßØÂàÜ',
    prize_type: 'points',
    prize_value: 100.0,
    win_probability: 0.3, // 30%‰∏≠Â•ñÁéá
    angle: 36,
    color: '#FFD700',
    sort_order: 2,
    stock_quantity: 1000,
    cost_points: 100,
    status: 'active'
  },
  {
    prize_id: 3,
    prize_name: 'ÁîúÂìÅ1‰ªΩ',
    prize_type: 'physical',
    prize_value: 15.0,
    win_probability: 0.2, // 20%‰∏≠Â•ñÁéá
    angle: 72,
    color: '#F39C12',
    sort_order: 3,
    stock_quantity: 1000,
    cost_points: 100,
    status: 'active',
    prize_description: 'ÁªøËå∂È•ºÊàñËÄÖÈ¶íÂ§¥'
  },
  {
    prize_id: 4,
    prize_name: 'ÈùíËèú1‰ªΩ',
    prize_type: 'physical',
    prize_value: 10.0,
    win_probability: 0.3, // 30%‰∏≠Â•ñÁéá
    angle: 108,
    color: '#2ECC71',
    sort_order: 4,
    stock_quantity: 1000,
    cost_points: 100,
    status: 'active'
  },
  {
    prize_id: 5,
    prize_name: '2000ÁßØÂàÜÂà∏',
    prize_type: 'points',
    prize_value: 2000.0,
    win_probability: 0.01, // 1%‰∏≠Â•ñÁéá
    angle: 144,
    color: '#9B59B6',
    sort_order: 5,
    stock_quantity: 100,
    cost_points: 100,
    status: 'active'
  },
  {
    prize_id: 6,
    prize_name: '500ÁßØÂàÜÂà∏',
    prize_type: 'points',
    prize_value: 500.0,
    win_probability: 0.18, // 18%‰∏≠Â•ñÁéá
    angle: 180,
    color: '#3498DB',
    sort_order: 6,
    stock_quantity: 1000,
    cost_points: 100,
    status: 'active'
  },
  {
    prize_id: 7,
    prize_name: 'Á≤æÂìÅÈ¶ñÈ•∞‰∏Ä‰∏™',
    prize_type: 'physical',
    prize_value: 200.0,
    win_probability: 0.01, // 1%‰∏≠Â•ñÁéá
    angle: 216,
    color: '#E74C3C',
    sort_order: 7,
    stock_quantity: 50,
    cost_points: 100,
    status: 'active'
  },
  {
    prize_id: 8,
    prize_name: 'ÁîüËÖåÊãºÁõò158',
    prize_type: 'physical',
    prize_value: 158.0,
    win_probability: 0.0, // 0%‰∏≠Â•ñÁéá
    angle: 252,
    color: '#1ABC9C',
    sort_order: 8,
    stock_quantity: 100,
    cost_points: 100,
    status: 'active'
  },
  {
    prize_id: 9,
    prize_name: '‰πùÂÖ´ÊäòÂà∏',
    prize_type: 'coupon',
    prize_value: 98.0,
    win_probability: 0.0, // ‰øùÂ∫ï‰∏ìÁî®ÔºåÂü∫Á°ÄÊäΩÂ•ñ‰∏ç‰∏≠Â•ñ
    angle: 288,
    color: '#27AE60',
    sort_order: 9,
    stock_quantity: 1000,
    cost_points: 100,
    status: 'active',
    prize_description: '‰øùÂ∫ïÊäΩÂ•ñ‰∏ìÁî®Âà∏'
  },
  {
    prize_id: 10,
    prize_name: 'Ë∞¢Ë∞¢ÂèÇ‰∏é',
    prize_type: 'empty',
    prize_value: 0.0,
    win_probability: 0.0, // Ëá™Âä®ËÆ°ÁÆóÔºàÂâ©‰ΩôÊ¶ÇÁéáÔºâ
    angle: 324,
    color: '#95A5A6',
    sort_order: 10,
    stock_quantity: 999999,
    cost_points: 100,
    status: 'active'
  }
]

/**
 * Êõ¥Êñ∞Â•ñÂìÅÈÖçÁΩÆ‰∏∫‰∏ª‰ΩìÂäüËÉΩÈúÄÊ±Ç
 */
async function updateMainFeaturePrizes () {
  try {
    await db.authenticate()
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü')

    // ÂºÄÂßã‰∫ãÂä°
    const transaction = await db.transaction()

    try {
      console.log('üéØ ÂºÄÂßãÊõ¥Êñ∞Â•ñÂìÅÈÖçÁΩÆ‰∏∫‰∏ª‰ΩìÂäüËÉΩÈúÄÊ±Ç...')

      for (const prize of MAIN_FEATURE_PRIZES) {
        await db.query(
          `
          UPDATE lottery_prizes 
          SET 
            prize_name = :prize_name,
            prize_type = :prize_type,
            prize_value = :prize_value,
            win_probability = :win_probability,
            angle = :angle,
            color = :color,
            sort_order = :sort_order,
            stock_quantity = :stock_quantity,
            cost_points = :cost_points,
            status = :status,
            prize_description = :prize_description,
            updated_at = NOW()
          WHERE prize_id = :prize_id
        `,
          {
            replacements: {
              ...prize,
              prize_description: prize.prize_description || null
            },
            type: Sequelize.QueryTypes.UPDATE,
            transaction
          }
        )

        console.log(
          `‚úÖ Êõ¥Êñ∞Â•ñÂìÅ${prize.prize_id}Âè∑Ôºö${prize.prize_name} (‰∏≠Â•ñÁéá${(prize.win_probability * 100).toFixed(1)}%)`
        )
      }

      // È™åËØÅÊ¶ÇÁéáÊÄªÂíå
      const totalProbability = MAIN_FEATURE_PRIZES.filter(p => p.prize_id !== 10) // ÊéíÈô§Ë∞¢Ë∞¢ÂèÇ‰∏é
        .reduce((sum, prize) => sum + prize.win_probability, 0)

      console.log('\nüìä Ê¶ÇÁéáÂàÜÊûê:')
      console.log(`   ‰∏≠Â•ñÊÄªÊ¶ÇÁéá: ${(totalProbability * 100).toFixed(1)}%`)
      console.log(`   ‰∏ç‰∏≠Â•ñÊ¶ÇÁéá: ${((1 - totalProbability) * 100).toFixed(1)}%`)

      if (totalProbability > 1) {
        throw new Error('‚ö†Ô∏è ‰∏≠Â•ñÊÄªÊ¶ÇÁéáË∂ÖËøá100%Ôºö' + (totalProbability * 100).toFixed(1) + '%')
      }

      // Êõ¥Êñ∞Ë∞¢Ë∞¢ÂèÇ‰∏éÁöÑÊ¶ÇÁéá‰∏∫Ââ©‰ΩôÊ¶ÇÁéá
      const remainingProbability = 1 - totalProbability
      await db.query(
        `
        UPDATE lottery_prizes 
        SET win_probability = :win_probability
        WHERE prize_id = 10
      `,
        {
          replacements: { win_probability: remainingProbability },
          type: Sequelize.QueryTypes.UPDATE,
          transaction
        }
      )

      console.log(`‚úÖ Êõ¥Êñ∞Ë∞¢Ë∞¢ÂèÇ‰∏éÊ¶ÇÁéá: ${(remainingProbability * 100).toFixed(1)}%`)

      // Êèê‰∫§‰∫ãÂä°
      await transaction.commit()

      // È™åËØÅÊõ¥Êñ∞ÁªìÊûú
      console.log('\nüîç È™åËØÅÊõ¥Êñ∞ÁªìÊûú:')
      const [updatedPrizes] = await db.query(`
        SELECT prize_id, prize_name, win_probability, status 
        FROM lottery_prizes 
        WHERE prize_id BETWEEN 1 AND 10
        ORDER BY prize_id ASC
      `)

      console.table(
        updatedPrizes.map(p => ({
          ID: p.prize_id,
          ÂêçÁß∞: p.prize_name,
          ‰∏≠Â•ñÁéá: (p.win_probability * 100).toFixed(1) + '%',
          Áä∂ÊÄÅ: p.status
        }))
      )

      console.log('\n‚úÖ ‰∏ª‰ΩìÂäüËÉΩÂ•ñÂìÅÈÖçÁΩÆÊõ¥Êñ∞ÂÆåÊàêÔºÅ')
      console.log('üéØ ÂäüËÉΩÁâπÁÇπ:')
      console.log('   1. ÂÖ´ÂÖ´ÊäòÂíåÁîüËÖåÊãºÁõò158Ôºö0%‰∏≠Â•ñÁéáÔºàÂâçÁ´ØËΩ¨ÁõòÊòæÁ§∫‰ΩÜ‰∏ç‰∏≠Â•ñÔºâ')
      console.log('   2. 100ÁßØÂàÜÂíåÈùíËèú1‰ªΩÔºöÂêÑ30%‰∏≠Â•ñÁéáÔºàÈ´òÈ¢ë‰∏≠Â•ñÔºâ')
      console.log('   3. ÁîúÂìÅ1‰ªΩÔºö20%‰∏≠Â•ñÁéáÔºå500ÁßØÂàÜÂà∏Ôºö18%‰∏≠Â•ñÁéá')
      console.log('   4. 2000ÁßØÂàÜÂà∏ÂíåÁ≤æÂìÅÈ¶ñÈ•∞ÔºöÂêÑ1%‰∏≠Â•ñÁéáÔºàÁ®ÄÊúâÂ•ñÂìÅÔºâ')
      console.log('   5. ‰πùÂÖ´ÊäòÂà∏Ôºö‰øùÂ∫ï‰∏ìÁî®ÔºàÁ¥ØËÆ°ÊäΩÂ•ñ10Ê¨°‰øùÂ∫ïÔºâ')
    } catch (error) {
      await transaction.rollback()
      throw error
    }
  } catch (error) {
    console.error('‚ùå Êõ¥Êñ∞Â•ñÂìÅÈÖçÁΩÆÂ§±Ë¥•:', error.message)
    process.exit(1)
  } finally {
    await db.close()
  }
}

/**
 * È™åËØÅÊ¶ÇÁéáËÆæÁΩÆÊòØÂê¶ÂêàÁêÜ
 */
function validateProbabilities () {
  console.log('üìä Â•ñÂìÅÊ¶ÇÁéáÈ™åËØÅ:')

  let totalProb = 0
  MAIN_FEATURE_PRIZES.forEach(prize => {
    if (prize.prize_id !== 10) {
      // ÊéíÈô§Ë∞¢Ë∞¢ÂèÇ‰∏é
      totalProb += prize.win_probability
      console.log(
        `   ${prize.prize_id}Âè∑ ${prize.prize_name}: ${(prize.win_probability * 100).toFixed(1)}%`
      )
    }
  })

  const emptyProb = 1 - totalProb
  console.log(`   10Âè∑ Ë∞¢Ë∞¢ÂèÇ‰∏é: ${(emptyProb * 100).toFixed(1)}%`)
  console.log(`   ÊÄªËÆ°: ${((totalProb + emptyProb) * 100).toFixed(1)}%`)

  return totalProb <= 1
}

// ‰∏ªÁ®ãÂ∫èÊâßË°å
if (require.main === module) {
  console.log('üéØ ‰∏ª‰ΩìÂäüËÉΩÂ•ñÂìÅÈÖçÁΩÆÊõ¥Êñ∞ËÑöÊú¨')
  console.log('ÂäüËÉΩÔºöË∞ÉÊï¥1-10Âè∑Â•ñÂìÅ‰∏∫Á¨¶Âêà‰∏ª‰ΩìÂäüËÉΩÈúÄÊ±ÇÁöÑÊ¶ÇÁéáÈÖçÁΩÆ\n')

  // È™åËØÅÊ¶ÇÁéáËÆæÁΩÆ
  if (!validateProbabilities()) {
    console.error('‚ùå Ê¶ÇÁéáÈÖçÁΩÆÈîôËØØÔºåËØ∑Ê£ÄÊü•ËÆæÁΩÆ')
    process.exit(1)
  }

  updateMainFeaturePrizes()
}

module.exports = { updateMainFeaturePrizes, MAIN_FEATURE_PRIZES }
